#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1601] =
    {   0,
        0,    0,   94,   92,   91,   91,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   91,    0,   90,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,    0,   39,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   42,   42,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    3,    0,
        0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   42,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       88,   83,    0,    0,    0,    0,    0,    0,   43,   43,
        0,    0,    0,    0,    0,    3,    3,    0,    0,    0,
        0,   30,   30,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    4,   38,    0,    0,   88,
       88,    0,    0,    0,    0,    0,    0,   43,    0,    0,
        0,    0,    0,    3,    0,    0,    0,   33,   30,    0,

       31,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   48,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   88,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,   33,    0,
       31,   31,    0,    0,   34,   34,    0,    0,    0,    0,
        0,   44,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,   52,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,    0,   31,
        0,    0,   34,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   41,   41,   65,   27,   51,    0,   67,
        0,    0,   49,    0,   53,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   40,   37,
        0,    0,    0,   17,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   29,    0,    0,   41,    0,   67,
       67,   71,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,    0,    0,    2,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,    0,    0,   67,   71,   71,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,    0,    0,    0,   71,    0,    0,
        0,    0,    0,    0,    0,    0,   13,    0,    0,    0,
        0,   66,    0,    0,    0,   14,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   14,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   12,    0,    0,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,   35,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   62,    0,    0,    0,    0,   87,   86,
        0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   35,    0,    0,    0,    0,   81,
        0,   22,    0,    0,    0,    0,    0,    0,   62,   62,
        0,    9,    0,    0,    0,   70,   70,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
        0,    0,    0,    0,    0,    0,   74,    0,    0,   55,
       75,   80,   81,   81,   20,    0,    0,    0,    0,   78,
       62,    0,    0,    0,    0,   70,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   16,   16,
        0,    0,    0,    0,    0,    0,   74,   74,    0,    0,
       55,   55,   75,   75,   80,   80,   81,   21,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   57,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,    0,    0,    0,    0,    0,   74,    0,    0,
       55,   75,   80,    0,    0,    0,    0,   63,    0,   85,
       58,    0,   82,    0,    0,    0,   57,   57,    0,    0,
        0,    0,    0,    0,    0,    0,   15,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,    0,   63,   63,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,   15,   15,    0,    0,    0,    0,
        0,   23,   36,    0,    0,    0,   63,    0,   89,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       15,    0,    0,    0,    0,    0,   23,   23,   36,   36,
        0,    0,    0,   84,    0,    0,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   47,    0,
       23,   36,    0,    0,    0,    0,    0,   69,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   56,    0,    0,
        0,   79,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   59,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,    0,    0,
        0,    0,    0,    0,    6,    5,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       24,   25,    0,    0,    0,    0,    0,    0,    0,   25,
       25,    0,    0,    0,    0,    0,    0,    0,   25,    0,
        0,   77,   76,    0,    0,    0,    0,    0,   77,   77,
       76,   76,    0,    0,    0,    0,   73,   77,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   61,    0,    0,
        0,    0,    0,    0,    0,   26,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   45,
        0,    0,   64,    0,    0,    0,    0,    0,   46,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    1,    8,    8,    9,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       19,   26,   27,   28,   29,   30,   31,   32,   33,   34,
        1,    1,    1,    1,    1,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   19,   44,   45,   46,   47,
       48,   49,   19,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1607] =
    {   0,
        0,    0, 3204, 3205,   57,   60, 3200,   52,   38,   51,
       65,   50,   60,   65,   64,   50,   96,   98,  109,  114,
      133,   62,   61,   64,  138, 3199, 3205,  107,  105,  106,
      122,  142,  102,  134,  136,  148,  153,  144,  150,  153,
      155,  146,  150,  168,  162, 3197,  146,  159,  168,  168,
      174,  173,  177,  178,  183,  183,  192,  182,  192,  193,
      194,  211,  197,  208,  205, 3196,  212,  217,  221,  208,
      225,  217,  225,  235, 3195,  223,  223,  225,  232, 3194,
      230,  246,  238,  239,  238,  241,  271,  265, 3193,  253,
      258, 3192,  260,  266, 3191,  267,  270,  269,  270,  266,

      285,  283,  286,  271,  278,  295,  284, 3190,  298,  289,
      302,  305,  301,  296,  298,  300, 3189,  300,  306, 3188,
      314,  319,  321,  324,  330,  316,  317,  320,  331,  340,
      339,  321,  333,  347,  343,  342,  358,  346, 3187,  369,
      343,  351,  354, 3186,  344,  358,  357,  364,  363, 3185,
      385, 3184,  371,  379,  379,  395,  379,  378, 3183,  384,
     3182, 3181,  402,  395,  410,  399,  418,  419,  405,  412,
      412,  410,  420,  421,  416,  426,  439,  423,  434,  432,
      432,  434,  441,  455,  457,  450,  450,  455,  466,  452,
      452,  450,  476,  465,  469,  473,  505,  472,  474,  481,

      482,  491,  506,  481,  495, 3180, 3179,  505,  488,  520,
      518,  527,  495,  507,  517,  530,  518,  523,  529,  527,
      532,  532,  538,  555,  536,  554,  549, 3178,  545,  549,
      563,  562, 3177,  563,  558,  562, 3205,  571,  559, 3205,
      561,  563,  573,  576,  567,  586,  592,  590,  591,  598,
      586,  591,  591, 3176,  585,  586,  596,  610,  603,  613,
      607,  614,  620,  618,  619, 3175,  611,  635, 3174,  630,
      634,  637,  632,  638,  631,  639,  650,  640,  636,  642,
      647,  657,  659,  663,  659,  660,  665,  670, 3173, 3172,
      658,  659,  660,  669,  672, 3171,  670, 3170,  672,  683,

      693,  685,  695,  695,  691,  690,  708,  706,  705,  710,
     3169,  712,  700,  703,  716, 3168,  702,  709,  710,  723,
      714,  728,  730,  722,  724,  737,  728,  741,  738,  751,
      753,  752,  742, 3167,  745,  746,  746,  759,  763,  756,
      758,  759,  761,  767,  773,  780,  766,  780,  777,  776,
      773, 3166, 3165,  781,  778, 3164,  783,   76,  799,  795,
      796,  790,  797,  797,  801,  803,  811,  813,  812,  806,
      817, 3163,  803,  818,  817,  821,  821,  824,  823,  835,
      841,  839,  849,  845,  845, 3162,  846,  852,  846,  856,
     3161, 3160,  846,  861,  858,  861, 3159,  857,  855,  857,

      873,  868,  866,  898,  878,  870,  882,  865,  889,  889,
      883,  889,  891,  891,  892,  891, 3158,  910,  901,  910,
     3157,  916,  905,  918,  918,  924, 3156,  938,  917,  912,
      924,  937,  929,  931,  951,  945,  955,  939,  942,  954,
      960,  945,  961,  965,  950,  965,  969,  954, 3155, 3154,
      962, 3153,  977,  961,  966,  974,  117,  988,  975,  975,
      984,  989, 1002,  987,  989,  986, 1003, 1011, 1004, 1000,
     1000, 1005, 1002, 3152, 1002, 1005, 1023, 1020, 1013, 1030,
     1020, 1023, 1024, 3151, 1023, 1025, 1042, 1030, 1047, 1035,
     3150, 3149, 3148, 1037, 1044, 1038, 1047, 3147, 1046, 1050,

     1066, 1054, 1071, 1076, 1080, 1074, 1083, 1083, 1070, 1066,
     1073, 1075, 1078, 1082, 1079, 1097, 1086, 1083, 1085, 1084,
     3146, 1101, 1100, 1106, 1112, 1117, 1103, 1106, 1119, 1124,
     3145, 1116, 1138, 1119, 1122, 1123, 1137, 1130, 1149, 1130,
     1149, 1142, 3144, 1162, 1134, 3143, 3142, 1153, 3141, 1155,
     1147, 1152, 1151, 1157, 1168, 1156, 3140, 1173, 1171, 1182,
     1183, 1168, 3205, 3139, 3138, 1170, 1180, 1175, 1176, 1192,
     1180, 1173, 1185, 1184, 1213, 1195, 1193, 1188, 1196, 1219,
     1203, 1214, 1213, 1213, 1214, 1218, 1216, 1229, 1221, 1235,
     1236, 1231, 1237, 1237, 1234, 1241, 1252, 1235, 3137, 1243,

     1282, 1261, 1260, 1263, 3136, 1255, 1255, 1269, 1277, 1285,
     1267, 1282, 3135, 1285, 1285, 1292, 1302, 1274, 1285, 1294,
     1304, 1306, 1309, 1302, 1316, 1314, 1308, 1325, 1308, 1311,
     1310, 1310, 3134, 3133, 3132, 1311, 1312, 1316, 1319, 1320,
     3205, 1334, 1317, 3131, 1336, 1322, 1323, 1319, 1333, 1346,
     3130, 1333, 1348, 1355, 1346, 1360, 1347, 1358, 1363, 1352,
     1357, 1365, 1357, 1362, 1373, 3129, 3128, 3127, 1361, 1377,
     3126, 1373, 1373, 1370, 1374, 1397, 3205, 1373, 1380, 1408,
     1418, 1385, 1396, 1391, 1400, 1414, 1404, 1424, 1420, 1423,
     1411, 1412, 1423, 1436, 1428, 1428, 1419, 1442, 1447, 1442,

     1461, 1431, 1440, 1466, 1444, 3125, 1453, 1441, 1464, 1470,
     1456, 1458, 1458, 1470, 1469, 1474, 1483, 1475, 1467, 1473,
     1483, 1484, 1473, 1492, 1479, 1501, 1478, 1490, 1491, 1496,
     1496, 3124, 1493, 1495, 3123, 1498, 1502, 1516, 1509, 3122,
     1515, 1508, 1524, 1520, 3113, 1515, 1529, 1528, 1519, 1524,
     1534, 3112, 1543, 1523, 1538, 1536, 3111, 1539, 1532, 1537,
     3110, 1543, 1549, 1542, 1548, 1541, 1566, 1574, 1586, 1557,
     1582, 1596, 1561, 1553, 1598, 1605, 1576, 1591, 1572, 1595,
     1589, 1608, 1605, 1590, 1608, 3108, 1591, 1602, 1593, 1606,
     3107, 1615, 1616, 3106, 1604, 1604, 1628, 1610, 1624, 3205,

     1616, 1621, 1649, 3104, 1631,    0, 3103, 1629, 3102, 3101,
     1635, 1632, 1639, 1637, 1640, 1657, 1655, 3099, 3098, 1647,
     3097, 1644, 1665, 1665, 1660, 3091, 1670, 1670, 1671, 3033,
     1672, 1676, 1665, 1672, 3019, 1677, 1672, 1689, 1681, 1695,
     1674, 1694, 1701, 1698, 1699, 1701, 1701, 3014, 1710, 2970,
     1711, 1710, 1701, 1705, 1701, 1714, 1719, 1706, 1714, 1716,
     1727, 2934, 2921, 1732, 1753, 3205, 3205, 3205, 1718, 1756,
     1759, 1721,    0, 1734, 3205, 1729, 1731, 1754, 1756, 1761,
     1750, 1752, 1748, 1757, 1750, 1751, 1753, 1762, 3205, 1777,
     1766, 1760, 1763, 1782, 1760, 1772, 1801, 1769, 1775, 1781,

     1793, 1806, 2913, 2875, 1784, 1792, 2844, 2826, 1805, 1796,
     1799,    0, 1797, 1800, 1799, 1801, 1804, 1809, 1815, 2822,
     1812, 1810, 1825, 1826, 1831, 1856, 1829, 1859, 1826, 1862,
     1865, 1868, 1831, 1834, 1833, 1850, 2788, 1854, 1856, 1856,
     2785, 1856, 1872, 1861, 1879, 1876, 1881, 2780, 2712, 1882,
     2696, 2650, 1885, 1867, 1868, 2630, 1868, 1918, 1877, 1883,
     1889, 1885, 1889, 1913, 1886, 1904, 1900,    0, 1903, 1907,
     1918, 1928, 1916, 1925, 1916, 1892, 2568, 1928, 1935, 1936,
     1940, 1924, 1928, 1944, 1953, 1969, 1929, 2561, 1948, 1955,
     1958, 1962, 1952, 1954,    0, 1956, 1961, 1970, 1965, 1961,

     1956, 1966, 1981, 1984, 1967, 1981, 1989, 1975, 2557, 1984,
     1993, 1999, 2022, 1996, 1988, 2552, 1988, 1997, 1997, 1993,
     2009, 1999, 2480, 2014, 2013, 2022, 2014, 2027, 2460, 2026,
     2043, 2020, 2034, 2021, 2025, 2030, 2027, 2056, 2430, 2025,
     2031, 2034, 2052, 2042, 2402, 2047,    0, 2049, 2046, 2048,
     2047, 3205, 2385, 2318, 2053, 2080, 2064, 2074, 2062, 2067,
     2081, 2068, 2076, 2093, 2076, 2076, 2103, 2092, 2081, 2097,
     2089, 2091, 2105, 2115, 2110, 2112, 2299, 2113, 2253, 2108,
     2112, 2109, 2112, 2122, 2123, 2112, 2214,    0, 2124, 2126,
     2119, 2121, 2131, 2140, 2126, 2142, 2142, 2141, 2150, 2153,

     2154, 2112, 2167, 2174, 2144, 2159, 2032, 2162, 2153, 2170,
     2159, 2159, 2178, 2186, 2169, 2173, 2172, 2173, 2029, 1996,
     2178, 2196, 2188, 1981, 2197, 2191, 2206, 2190, 1935, 2194,
     2205, 2192, 2193, 2195, 2219,    0, 2206, 2203, 3205, 2206,
     2211, 2211, 2224, 2212, 2221, 2226, 2221, 2228, 2229, 2221,
     2243, 1883, 2227, 2238, 2231, 2238, 2240, 1848, 1845, 2239,
     2267, 2280, 1830, 1768, 1734, 1726, 2269, 2274, 2247, 2256,
     2272, 2257, 2280, 2290, 2276,    0, 2288, 2292, 3205, 3205,
     2280, 2298, 2295, 2282, 1626, 2288, 2288, 2287, 2286, 2292,
     2298, 3205, 2308, 2311, 2300, 2321, 2301, 2308, 2304, 2313,

     2332, 2313, 2342, 2327, 2344, 2334, 2349, 2351, 2353, 2367,
     2357, 2363, 2341, 2337, 2355, 2351, 2350, 2353, 2373, 2376,
     2375,    0, 2370, 2362, 2361, 2384, 2388, 2374, 2381, 2382,
     1576, 2376, 1530, 2391, 1495, 2380, 2381, 2382, 2392, 2409,
     2386, 2401, 2406, 2396, 2398, 2403, 2430, 2404, 2406, 2433,
     2447, 2450, 2440, 2453, 1485, 2416, 2441, 2450, 2439, 3205,
     2460, 1433, 2454, 2456, 2457, 2464, 2443, 2463, 2454, 2447,
     2452, 2472, 2455, 2465, 2457, 2459, 2460, 2462, 2496, 2512,
     1425, 2464, 2472, 2483, 2479, 2484, 2516, 2519, 2490, 2502,
     2521, 2525, 2530, 2534, 2536, 2539, 2541, 3205, 1384, 2509,

     2537, 2534, 2545, 2545, 2530, 2532, 2542, 2535, 2550, 2546,
     2542, 2560, 1380, 2542, 2554, 2546, 1353, 2556, 2557, 2560,
     2575, 2583, 2561, 1343, 2557, 2569, 2578, 2593, 1247, 1194,
     2597, 2599, 2601, 2604, 2575, 2588, 2604, 2616, 2590, 3205,
     3205, 2596, 3205, 2598, 2593, 2596, 2619, 2622, 2614, 2619,
     2609, 2622, 2615, 2622, 2629, 2636, 2640, 2641, 2634, 2639,
     2632, 1190, 2656, 2658, 2664, 2638, 2642, 2639, 2666, 2675,
     2656, 2664, 2656, 2670, 2674, 2681, 2668, 2667, 2680, 2669,
     2682, 2680, 2681, 2680, 2694, 2699, 2683, 2686, 2685, 1178,
     2693, 2722, 2732, 2695, 2698, 2698, 2728, 2700, 3205, 2714,

     1148, 2708, 2725, 2734, 2719, 1139, 1104, 2733, 2734, 2731,
     2744, 2736, 2737, 1040, 2751, 2742, 2753, 2756, 2758, 2768,
     2755, 2762, 2768, 3205, 2770, 2758, 3205, 2758, 2759, 2771,
     2768, 2781, 2767, 2768, 2761, 2763, 2770, 2791, 2793, 2777,
     2797, 2815, 1031,  972, 2785, 2786, 2798, 3205, 2807, 2803,
     2816, 2803, 2805, 2806, 2824, 2825,  967, 2829, 2813, 2833,
     2837, 3205, 2833, 2837, 2825, 2831, 2832, 2830,  827,  723,
     2833, 2834, 2857,  710, 2861, 2866, 2842, 2841, 2848, 2865,
      702, 2854, 2875, 2880, 2863, 2872, 2884, 2882,  621, 2868,
      582,  503, 2869, 2880, 2891, 2893, 2881, 2883, 2887, 2895,

      494, 2902, 2904, 2897, 2905, 2895, 2899, 2914, 2896, 2915,
     2927, 2936, 2914, 2901,  337,  257, 2906, 2923, 2914, 2939,
     2951, 2927, 2927, 2957, 2959, 2929, 2935, 2939, 2961, 2945,
     2958, 2969, 2974, 2955, 2951, 2959, 2955, 2962, 2982, 2985,
     2991, 2994, 2981,  183, 2977,  166, 3205, 2997, 3006, 2989,
     2991, 2987, 2995, 3003, 2991, 2990, 3008, 2998, 3011, 3012,
     3006, 3003, 3005, 3007, 3011,  161, 3026, 3205, 3010, 3031,
     3011, 3028, 3021, 3029, 3038, 3205,  133, 3050, 3034, 3050,
     3044, 3045, 3046,  125, 3045, 3052, 3066,  113,  111, 3068,
     3070, 3052, 3078, 3067, 3078, 3071,   77, 3089, 3091, 3205,

     3118, 3120,   71,   67, 3122,   63
    } ;

static yyconst flex_int16_t yy_def[1607] =
    {   0,
     1600,    1, 1600, 1600, 1600, 1600, 1601, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1601, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1602, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1602, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1603, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1603, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1604, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1604, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1605, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1605, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1606, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1606, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,    0,

     1600, 1600, 1600, 1600, 1600, 1600
    } ;

static yyconst flex_int16_t yy_nxt[3264] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    4,    4,    8,
        9,   10,   11,   12,   13,    4,   14,   15,    4,   16,
        4,   17,   18,    4,   19,   20,   21,   22,   23,    4,
       24,    4,    4,    4,    8,    9,   10,   11,   12,   13,
        4,   14,   15,   16,    4,   17,   18,    4,   19,   20,
       21,   22,   23,    4,   24,    4,    4,    4,   25,   25,
       25,   25,   25,   25,   28, 1222,   30,   31,   35, 1047,
       39,   32,   29,  968,   33,   46,   34,   40,   36,   43,
     1598,   65,   41,  428,  428,   63,   44,   64,   37,   28,
       30,   45,   31,   38,   39,   32,   29,   42,   33,   46,

       34,   50,   40,   36,   43,   47,   65,   41,   48,   63,
       44,   64,   37,   49, 1592,   45, 1591,   38,   52,   66,
       68,   42,   53,   56,  533,  533,   51,   57, 1587,   67,
       47,   71,   54,   48,   55,   69, 1580,   58,   49,   25,
       25,   25,   59,   52,   66,   68,   60,   53,   56,   61,
       51,   70,   57,   67,   62,   71,   54,   72,   55,   73,
       69,   58,   74,   75, 1570,   76,   59,   77,   81, 1553,
       82,   60,   83,   78,   61,   86,   70,   88,   62,   89,
       79,   72,   84,   73,   80,   85, 1551,   74,   75,   76,
       90,   91,   77,   81,   82,   92,   83,   78,   93,   94,

       86,   88,   95,   89,   79,   98,   96,   84,   80,  101,
       85,   97,  102,  103,   90,   91,   99,  104,  100,   92,
      105,  108,   93,   94,  106,  107,   95,  109,  111,   98,
       96,  112,  113,  101,  114,   97,  102,  103,  115,  117,
       99,  104,  100,  116,  118,  105,  108,  120,  106,  107,
      121,  109,  122,  111,  123,  125,  112,  113,  114,  126,
     1525,  127,  128,  115,  117,  129,  130,  116,  135,  118,
      138,  120,  139,  141,  121,  142,  122,  144,  123,  125,
      131,  146,  136,  147,  126,  127,  128,  132,  133,  129,
      130,  134,  145,  148,  149,  138,  150,  139,  141,  151,

      142,  152,  144,  153,  154,  131,  146,  136,  147,  155,
      157,  159,  132,  133,  158,  134,  145,  148,  160,  149,
      161,  150,  162,  163,  151,  152,  164,  153,  166,  154,
      167,  169,  170,  155,  171,  157,  159,  172,  158,  173,
     1524,  174,  175,  160,  161,  176,  162,  163,  177,  178,
      164,  179,  166,  180,  167,  181,  169,  170,  182,  171,
      183,  198,  172,  185,  173,  174,  175,  189,  184,  176,
      194,  195,  186,  177,  178,  187,  179,  180,  191,  181,
      196,  199,  192,  182,  200,  183,  198,  185,  188,  201,
      202,  189,  184,  193,  194,  195,  204,  186,  206,  207,

      187,  208,  213,  191,  196,  199,  214,  192,  200,  216,
      209,  219,  188,  201,  202,  210,  211,  193,  220,  222,
      212,  204,  206,  207,  221,  208,  213,  223,  224,  233,
      214,  227,  225,  216,  226,  209,  219,  228,  229,  210,
      211,  230,  220,  222,  212,  231,  232,  234,  235,  221,
      236,  237,  223,  224,  233,  227,  238,  225,  239,  226,
      240,  228,  229,  241,  242,  230,  244,  245,  248,  231,
      232,  234,  246,  235,  236,  249,  237,  247,  250,  251,
      238,  252,  239,  243,  240,  253,  255,  241,  254,  242,
      256,  244,  245,  248,  265,  266,  246, 1510,  267,  268,

      249,  247,  250,  251,  269,  252, 1503,  243,  272,  273,
      253,  255,  254,  277,  276,  256,  257,  270,  265,  266,
      258,  271,  259,  267,  268,  281,  260,  282,  261,  269,
      262,  263,  272,  278,  273,  279,  280,  277,  264,  276,
      283,  257,  270,  284,  287,  258,  271,  259,  285,  281,
      260,  282,  261,  286,  262,  263,  288,  289,  278,  290,
      279,  280,  264,  291,  283,  294,  292,  295,  284,  287,
      296,  298,  285,  299,  300,  301,  303,  286,  304,  305,
      288,  289,  293,  290,  306, 1502,  307,  291,  308,  294,
      309,  292,  295,  310,  296,  298,  311,  299,  312,  300,

      301,  303,  304,  313,  305,  314,  293,  315,  317,  306,
      307,  316,  308,  318,  309,  319,  320,  310,  322,  323,
      311,  324,  312,  325, 1500,  326,  327,  329,  313,  328,
      314,  333,  315,  317,  334,  316,  330,  318,  336,  319,
      320,  331,  322,  323,  332,  324,  337,  340,  325,  326,
      339,  327,  329,  328,  341,  343,  333,  342,  344,  334,
      345,  330,  336,  346,  350,  331,  347,  348,  332,  349,
      351,  337,  340,  352,  339,  353,  354,  355,  356,  341,
      343,  342,  344,  357,  345,  360,  361,  362,  346,  350,
      347,  348,  363,  349,  364,  351,  366,  368,  352,  369,

      353,  354,  355,  356,  370, 1493,  371,  372,  357,  360,
      361,  362,  373, 1488,  374,  375,  363,  376,  364,  377,
      366,  368,  378,  379,  369,  381, 1484,  382,  383,  370,
      371,  384,  372,  386,  387,  388,  389,  373,  374,  375,
      390,  391,  376,  392,  377,  393,  394,  378,  379,  395,
      381,  382,  383,  396,  397,  398,  384,  386,  387,  388,
      399,  389,  400,  406,  390,  401,  391,  403,  392,  393,
      394,  405,  402,  407,  395,  408,  409,  396,  410,  397,
      398,  411,  412,  413,  414,  399,  415,  400,  406,  416,
      401,  403,  417,  418,  419,  405,  402,  407,  420,  421,

      408,  409,  410,  424,  425,  411,  412,  413,  427,  414,
      429,  415,  430,  431,  416,  432,  417,  433,  418,  419,
      434,  435,  420,  421,  437,  438,  439,  424,  425,  440,
     1483,  436,  427,  441,  442,  429,  444,  430,  431,  432,
      445,  433,  446,  447,  434,  435,  448,  449,  437,  450,
      438,  439,  451,  452,  440,  436,  453,  441,  454,  442,
      444,  455,  456,  458,  445,  459,  446,  447,  460,  461,
      448,  449,  464,  450,  465,  466,  467,  451,  452,  469,
      470,  453,  471,  454,  472,  473,  455,  456,  458,  474,
      459,  478,  460,  479,  461,  480,  464,  481,  482,  465,

      466,  467,  483,  469,  470,  484,  471,  475,  486,  472,
      473,  485,  487,  474,  488,  476,  478,  479,  489,  477,
      480,  481,  491,  482,  492,  493,  495,  483,  496,  484,
      497,  498,  475,  486,  499,  485,  487,  505,  488,  506,
      476,  500,  489,  477,  503,  504,  504,  491,  492,  501,
      493,  495,  496,  507,  508,  497,  498,  509,  510,  499,
      511,  505,  512,  506,  513,  516,  500,  514,  515,  517,
     1473,  518,  519,  501,  520, 1461,  521,  507,  522,  508,
      523,  509,  510,  524,  527,  511,  529,  512,  530,  513,
      516,  514,  515,  531,  517,  518,  532,  519,  534,  520,

      521,  535,  536,  522,  537,  523,  538,  524,  527,  539,
      539,  529,  530,  540,  541,  542,  543,  531,  544,  544,
      532,  545,  548,  534,  546,  535,  536,  547,  537,  549,
      551,  538,  552,  555, 1460,  556,  553,  540,  541,  542,
      554,  543,  557, 1438,  558,  559,  545,  548,  546,  560,
      562,  547,  563,  549,  551,  564,  552,  565,  555,  556,
      566,  553,  567,  571,  572,  554,  573,  557,  558,  559,
      574,  576,  577,  560,  562,  578,  563,  579,  580,  580,
      564,  565,  503,  504,  504,  566,  567,  571,  572,  581,
      573,  582,  583,  584,  574,  576,  577,  585,  586,  587,

      578,  579,  588,  589,  590,  591,  592, 1432,  593,  594,
      595,  596,  598,  599,  581,  600,  582,  583,  584,  601,
      601,  585,  586,  587,  602,  602,  588,  589,  590,  591,
      603,  592,  593,  594,  595,  596,  604,  598,  599,  605,
      600,  606, 1431,  608,  609,  610,  610,  611,  612,  613,
      614, 1426,  615,  618,  603,  616,  617,  617,  619,  620,
      604,  624,  627,  605,  629,  631,  606,  608,  622,  623,
      623,  611,  612,  613,  630,  614,  615,  618,  632,  633,
      634, 1415,  635,  619,  620,  624,  637,  627,  638,  629,
      631,  639,  640, 1391,  641,  644,  645, 1364,  630,  646,

      647,  650,  632,  633,  651,  634,  635,  648,  656,  649,
      657,  637,  652,  638,  653,  658,  639,  640,  641,  644,
      659,  645,  654,  646,  647,  650,  580,  580,  651,  660,
      655,  664,  648,  656,  649,  657,  652,  661,  653,  658,
      662,  663,  665,  666,  659,  667,  669,  654,  668,  670,
     1363,  671,  672,  660,  673,  655,  664,  674,  675,  676,
      676,  661,  677,  679,  662,  663,  665,  666,  602,  602,
      667,  669,  668,  682,  670,  671,  683,  672,  685,  673,
      686,  674,  687,  675,  688,  688,  677,  679,  680,  681,
      681,  609,  610,  610,  689,  690,  692,  693,  682,  694,

      694,  683,  685,  695,  686,  696,  697,  687,  616,  617,
      617,  698,  698,  699,  699,  622,  623,  623,  689,  700,
      690,  692,  693,  701,  701,  702,  708,  695,  703,  696,
      705,  697,  704,  704,  706,  707,  712,  713,  714,  715,
      716,  717,  717,  718,  700,  720, 1359,  721,  722,  723,
      702,  708,  703,  724,  705,  725, 1353,  727,  706,  707,
      712,  713,  714,  715,  716,  728,  729,  718,  730,  731,
      720,  721,  722,  723,  732,  733,  734,  724,  735,  736,
      725,  727,  737, 1349,  738,  739,  740, 1334,  744,  745,
      728,  729,  730,  747,  731,  748,  749,  750,  732,  751,

      733,  734,  735,  736,  676,  676,  752,  737,  738,  739,
      754,  740,  744,  755,  745,  753,  753,  747,  756,  748,
      749,  750,  757,  751,  680,  681,  681,  758, 1322,  759,
      752,  688,  688,  760,  754,  761, 1303,  762,  755,  763,
      764,  765,  756,  694,  694,  766,  757,  767,  768,  769,
      769,  770,  758,  759,  699,  699,  773,  774,  760,  777,
      761,  762,  779,  763,  780,  764,  765,  771,  772,  772,
      766,  767,  775,  776,  776,  781,  770,  782,  782,  783,
      773,  784,  774,  785,  777,  786,  787,  779,  780,  788,
      717,  717,  789, 1298,  790,  791,  792,  793, 1274,  794,

      781,  795,  800,  783,  796,  784,  798,  785,  797,  797,
      786,  787,  799,  801,  788,  802,  804,  789,  790,  791,
      805,  792,  793,  794,  807,  808,  795,  800,  796,  809,
      798,  810,  812, 1272,  813,  814,  799,  815,  801,  802,
      804,  817,  818,  819,  805,  820,  821,  822,  807,  808,
      753,  753,  824,  825,  809,  810,  826,  812,  813,  828,
      814,  829,  815,  830,  832,  817,  833,  818,  819,  820,
      821,  834,  822,  835,  836,  837,  824,  839,  825, 1270,
      826,  838,  838,  828,  841,  829,  842,  830,  832,  840,
      840,  833,  768,  769,  769,  834,  844,  835,  836,  847,

      837,  839,  771,  772,  772,  843,  843,  848,  841,  849,
      842,  775,  776,  776,  845,  782,  782,  851,  846,  850,
      844,  852,  857,  847,  854,  855,  856,  859,  860, 1230,
      862,  863,  848,  849,  864,  865,  865,  866,  845,  867,
      872,  851,  846,  868,  850,  869,  852,  857,  854,  855,
      856,  875,  859,  860,  862,  863,  870,  870,  878,  879,
      880,  866,  881,  882,  867,  872,  883,  868,  884,  869,
      887,  889,  890,  890,  891,  875,  892,  894,  894,  895,
      896,  898,  878,  879,  880,  899,  881,  882,  900,  901,
      903,  883,  904,  884,  887,  889,  838,  838,  905,  891,

      906,  892,  840,  840,  895,  896,  898,  907,  843,  843,
      899,  908,  900,  909,  901,  903,  904,  910,  911,  913,
      915,  916,  918,  905,  906,  917,  919,  920,  921, 1209,
      922,  923,  907,  924,  925,  925,  908, 1208,  909,  928,
      928,  929,  910,  911,  913,  915,  916,  918,  933,  917,
      919,  934,  920,  921,  922,  935,  923,  936,  924,  864,
      865,  865,  930,  931,  931,  929,  932,  932,  937,  938,
      939, 1207,  933,  940,  941,  942,  934,  943,  944,  935,
      945,  936,  946,  947,  890,  890,  948,  949,  950,  894,
      894,  951,  952,  937,  938,  939,  954,  940,  941,  942,

      955,  943,  944,  956,  945,  957,  946,  947,  953,  953,
      948,  949,  950,  958,  958,  951,  952,  961,  962,  965,
      954,  966,  967,  969,  955,  970,  971,  956,  972,  973,
      957,  974,  975, 1206,  977,  978,  979,  980,  925,  925,
      982,  961,  962,  983,  965,  966,  967,  969, 1203,  970,
      971, 1202,  972,  973,  987,  974,  988,  975,  977,  978,
      989,  979,  980,  981,  981,  982,  928,  928,  983,  984,
      984,  930,  931,  931,  985,  986,  986,  990,  987,  992,
      988,  993,  994,  996,  989,  997, 1196,  998,  999, 1000,
     1001, 1005,  953,  953, 1008, 1009, 1011, 1014, 1002, 1031,

     1031,  990, 1016,  992, 1015,  993,  994,  996, 1017, 1018,
      997,  998, 1021,  999, 1000, 1001, 1005, 1022, 1008, 1009,
     1011, 1014, 1023, 1002, 1012, 1013, 1013, 1016, 1015, 1024,
     1019, 1026, 1017, 1018, 1020, 1025, 1021, 1027, 1176, 1028,
     1029, 1033, 1022, 1030, 1034, 1035, 1023,  981,  981, 1036,
     1037,  984,  984, 1024, 1039, 1019, 1026, 1041, 1020, 1025,
     1038, 1038, 1027, 1028, 1042, 1029, 1033, 1030, 1043, 1034,
     1035, 1044, 1049, 1036, 1037,  985,  986,  986, 1039, 1045,
     1046, 1048, 1041, 1050, 1171, 1051, 1052, 1053, 1054, 1042,
     1055, 1056, 1056, 1043, 1057, 1058, 1044, 1049, 1059, 1168,

     1060, 1062, 1063, 1045, 1046, 1048, 1064, 1064, 1050, 1051,
     1052, 1053, 1054, 1065, 1069, 1055, 1066, 1068, 1057, 1070,
     1058, 1071, 1072, 1059, 1060, 1073, 1062, 1063, 1012, 1013,
     1013, 1075, 1167, 1076, 1077, 1154, 1078, 1079, 1065, 1069,
     1066, 1068, 1081, 1070, 1082, 1071, 1083, 1072, 1084, 1073,
     1031, 1031, 1085, 1086, 1087, 1089, 1075, 1076, 1090, 1077,
     1078, 1091, 1079, 1038, 1038, 1092, 1096, 1081, 1082, 1093,
     1095, 1083, 1084, 1097, 1098, 1099, 1085, 1086, 1087, 1089,
     1102, 1105, 1090, 1106, 1108, 1091, 1103, 1104, 1104, 1107,
     1092, 1096, 1109, 1093, 1095, 1110, 1111, 1097, 1098, 1099,

     1064, 1064, 1112, 1113, 1102, 1116, 1105, 1117, 1106, 1108,
     1114, 1114, 1115, 1107, 1118, 1150, 1119, 1109, 1120, 1110,
     1111, 1121, 1122, 1122, 1123, 1124, 1112, 1113, 1126, 1131,
     1116, 1117, 1128, 1129, 1130, 1132, 1133, 1115, 1134, 1118,
     1119, 1137, 1120, 1138, 1146, 1139, 1121, 1140, 1141, 1123,
     1124, 1142, 1144, 1126, 1131, 1143, 1128, 1129, 1130, 1145,
     1132, 1133, 1134, 1147, 1148, 1149, 1137, 1152, 1138, 1139,
     1153, 1140, 1155, 1141, 1151, 1151, 1142, 1144, 1156, 1143,
     1103, 1104, 1104, 1157, 1145, 1158, 1159, 1160, 1147, 1148,
     1149, 1152, 1161, 1162, 1162, 1153, 1163, 1155, 1164, 1165,

     1166, 1169, 1156, 1122, 1122, 1170, 1172, 1177, 1157, 1158,
     1159, 1173, 1160, 1174, 1174, 1175, 1178, 1135, 1179, 1180,
     1163, 1181, 1164, 1165, 1166, 1169, 1182, 1182, 1183, 1184,
     1170, 1172, 1177, 1185, 1186, 1173, 1187, 1188, 1195, 1175,
     1189, 1178, 1179, 1180, 1190, 1181, 1191, 1192, 1193, 1194,
     1151, 1151, 1183, 1184, 1197, 1198, 1127, 1185, 1186, 1199,
     1187, 1200, 1188, 1195, 1189, 1201, 1204, 1213, 1190, 1214,
     1191, 1192, 1193, 1194, 1205, 1205, 1210, 1210, 1197, 1211,
     1198, 1212, 1212, 1199, 1217, 1200, 1161, 1162, 1162, 1201,
     1204, 1213, 1215, 1218, 1214, 1216, 1219, 1220, 1220, 1221,

     1223, 1224, 1125, 1225, 1226, 1227, 1227, 1228, 1217, 1229,
     1231, 1232, 1233, 1234, 1235, 1236, 1215, 1237, 1218, 1216,
     1238, 1101, 1239, 1221, 1241, 1223, 1224, 1225, 1240, 1240,
     1242, 1243, 1228, 1229, 1231, 1232, 1233, 1234, 1235, 1244,
     1236, 1245, 1237, 1246, 1248, 1238, 1239, 1249, 1241, 1247,
     1247, 1205, 1205, 1255, 1242, 1243, 1250, 1250, 1251, 1251,
     1252, 1252, 1256, 1244, 1212, 1212, 1245, 1246, 1257, 1248,
     1212, 1212, 1249, 1253, 1254, 1254, 1258, 1259, 1255, 1260,
     1261, 1261, 1219, 1220, 1220, 1262, 1256, 1263, 1100, 1264,
     1265, 1266, 1266, 1257, 1226, 1227, 1227, 1267, 1268, 1269,

     1258, 1259, 1271, 1260, 1273, 1094, 1275, 1276, 1277, 1278,
     1262, 1281, 1263, 1264, 1265, 1279, 1280, 1280, 1282, 1283,
     1286, 1267, 1284, 1268, 1269, 1285, 1271, 1289, 1290, 1273,
     1275, 1276, 1277, 1088, 1278, 1281, 1287, 1288, 1288, 1291,
     1292, 1292, 1299, 1282, 1283, 1286, 1284, 1297, 1297, 1285,
     1300, 1289, 1290, 1293, 1294, 1294, 1295, 1296, 1296, 1253,
     1254, 1254, 1301, 1080, 1302, 1304, 1299, 1261, 1261, 1305,
     1306, 1266, 1266, 1307, 1308, 1300, 1309, 1310, 1311, 1312,
     1312, 1313, 1314, 1074, 1317, 1318, 1319, 1301, 1302, 1320,
     1304, 1323, 1315, 1316, 1305, 1306, 1326, 1307, 1324, 1308,

     1309, 1310, 1311, 1321, 1321, 1313, 1325, 1314, 1317, 1318,
     1319, 1327, 1329, 1320, 1330, 1323, 1315, 1316, 1279, 1280,
     1280, 1326, 1324, 1328, 1328, 1287, 1288, 1288, 1331, 1331,
     1325, 1291, 1292, 1292, 1335, 1327, 1329, 1332, 1332, 1330,
     1293, 1294, 1294, 1333, 1333, 1295, 1296, 1296, 1297, 1297,
     1336, 1337, 1338, 1338, 1339, 1067, 1340, 1341, 1335, 1342,
     1061, 1343, 1344, 1345, 1040, 1346, 1347, 1348, 1348, 1350,
     1351, 1032, 1352, 1354, 1355, 1336, 1337, 1356, 1358, 1339,
     1340, 1341, 1321, 1321, 1342, 1343, 1360, 1344, 1345, 1346,
     1357, 1357, 1361, 1350, 1362, 1351, 1352, 1366, 1354, 1355,

     1328, 1328, 1356, 1358, 1331, 1331, 1332, 1332, 1333, 1333,
     1360, 1365, 1365, 1367, 1368, 1373, 1361, 1371, 1372, 1362,
     1374, 1366, 1369, 1370, 1370, 1375, 1376, 1376, 1347, 1348,
     1348, 1377, 1378, 1010, 1379, 1380, 1382, 1367, 1381, 1368,
     1373, 1371, 1372, 1383, 1374, 1384, 1385, 1386, 1386, 1375,
     1387, 1388, 1389, 1007, 1390, 1394, 1377, 1378, 1379, 1395,
     1380, 1382, 1381, 1392, 1392, 1393, 1393, 1396, 1383, 1398,
     1384, 1365, 1365, 1397, 1397, 1387, 1388, 1389, 1390, 1399,
     1394, 1369, 1370, 1370, 1395, 1400, 1401, 1402, 1376, 1376,
     1403, 1396, 1404, 1405, 1398, 1406, 1407, 1408, 1409, 1006,

     1410, 1411, 1411, 1412, 1399, 1385, 1386, 1386, 1413, 1400,
     1414, 1401, 1402, 1416, 1403, 1004, 1404, 1421, 1405, 1406,
     1422, 1407, 1408, 1409, 1410, 1423, 1424, 1412, 1417, 1418,
     1418, 1425, 1413, 1427, 1414, 1397, 1397, 1416, 1419, 1420,
     1420, 1421, 1428, 1429, 1422, 1430, 1433, 1434, 1435, 1423,
     1424, 1411, 1411, 1436, 1437, 1440, 1425, 1427, 1439, 1439,
     1441, 1441, 1417, 1418, 1418, 1442, 1442, 1428, 1429, 1430,
     1443, 1433, 1434, 1435, 1419, 1420, 1420, 1444, 1436, 1437,
     1440, 1445, 1446, 1003, 1447, 1448, 1449, 1450,  995, 1451,
     1452,  991, 1453, 1454, 1455, 1443, 1456, 1457, 1458, 1458,

     1439, 1439, 1444, 1459, 1441, 1441, 1445, 1446, 1447, 1448,
     1449, 1462, 1450, 1451, 1463, 1452, 1453, 1454, 1455, 1464,
     1456, 1457, 1442, 1442, 1465,  976, 1466, 1459, 1467,  964,
     1468, 1469, 1470, 1471, 1472, 1462, 1458, 1458, 1463, 1474,
     1475, 1475, 1477, 1464, 1476, 1476, 1478,  963, 1479, 1465,
     1466, 1480, 1481, 1467, 1468, 1469, 1470, 1482, 1471, 1472,
     1485, 1486, 1489, 1474, 1487, 1487, 1490, 1477, 1475, 1475,
     1491, 1478, 1479, 1476, 1476, 1480, 1481, 1492,  960, 1494,
     1497, 1482, 1495, 1495, 1485, 1486, 1489, 1496, 1496, 1498,
     1490, 1487, 1487, 1499, 1491, 1501, 1504, 1505, 1495, 1495,

     1496, 1496, 1492, 1494, 1506, 1497, 1507, 1508, 1509, 1511,
     1511, 1512, 1512, 1513, 1498, 1514,  959, 1515, 1499, 1501,
     1504, 1516, 1505, 1517,  927, 1518, 1519, 1522, 1506, 1523,
     1507, 1508, 1526, 1509, 1511, 1511, 1527,  926, 1513, 1528,
     1514, 1515, 1520, 1521, 1521, 1516, 1529, 1529, 1517, 1518,
     1530, 1519, 1522, 1523, 1531, 1534, 1526, 1520, 1521, 1521,
     1535, 1527, 1536, 1528, 1532, 1532, 1533, 1533, 1529, 1529,
     1537, 1538, 1543,  914, 1530, 1539, 1540, 1540, 1531, 1534,
     1541, 1542, 1542, 1544, 1535, 1545, 1536, 1546, 1547, 1548,
     1548, 1539, 1540, 1540, 1537, 1550, 1538, 1543, 1549, 1549,

     1541, 1542, 1542, 1552, 1548, 1548, 1554, 1544, 1555, 1545,
     1556, 1546, 1547, 1549, 1549, 1557, 1558,  912, 1559, 1560,
     1550, 1561,  902, 1562, 1563, 1564, 1569, 1552, 1565, 1566,
     1567, 1554, 1568, 1555, 1556, 1571,  897, 1572, 1575, 1557,
     1573, 1558, 1559, 1560, 1576, 1578, 1561, 1562, 1577, 1563,
     1564, 1569, 1565, 1566, 1567, 1579, 1568, 1582, 1574, 1581,
     1571, 1572, 1575, 1583, 1589, 1573, 1584, 1585, 1586, 1576,
     1578, 1588, 1577, 1590, 1590, 1590, 1590, 1593, 1593, 1594,
     1579, 1582, 1574, 1595, 1581, 1593, 1593, 1596, 1583, 1589,
     1584, 1585, 1586, 1597,  893, 1588, 1599, 1599, 1599, 1599,

      888,  886,  885, 1594,  877,  876,  874,  871, 1595,  861,
      858,  853, 1596,  831,  827,  823,  816, 1597,   26,   26,
       26,  873,  873, 1136, 1136,  811,  806,  803,  778,  746,
      743,  742,  741,  726,  719,  711,  710,  709,  691,  684,
      678,  643,  642,  636,  628,  626,  625,  621,  607,  597,
      575,  570,  569,  568,  561,  550,  528,  526,  525,  502,
      494,  490,  468,  463,  462,  457,  443,  426,  423,  422,
      404,  385,  380,  367,  365,  359,  358,  338,  335,  321,
      302,  297,  275,  274,  218,  217,  215,  205,  203,  197,
      190,  168,  165,  156,  143,  140,  137,  124,  119,  110,

       87,   27,   27, 1600,    3, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600
    } ;

static yyconst flex_int16_t yy_chk[3264] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    6,    6,    6,    8, 1606,    9,   10,   11, 1604,
       12,   10,    8, 1603,   10,   16,   10,   13,   11,   15,
     1597,   24,   14,  358,  358,   22,   15,   23,   11,    8,
        9,   15,   10,   11,   12,   10,    8,   14,   10,   16,

       10,   18,   13,   11,   15,   17,   24,   14,   17,   22,
       15,   23,   11,   17, 1589,   15, 1588,   11,   19,   28,
       30,   14,   19,   20,  457,  457,   18,   20, 1584,   29,
       17,   33,   19,   17,   19,   31, 1577,   20,   17,   25,
       25,   25,   20,   19,   28,   30,   21,   19,   20,   21,
       18,   32,   20,   29,   21,   33,   19,   34,   19,   35,
       31,   20,   36,   37, 1566,   38,   20,   39,   41, 1546,
       42,   21,   43,   40,   21,   45,   32,   47,   21,   48,
       40,   34,   44,   35,   40,   44, 1544,   36,   37,   38,
       49,   50,   39,   41,   42,   51,   43,   40,   52,   53,

       45,   47,   54,   48,   40,   56,   55,   44,   40,   58,
       44,   55,   59,   60,   49,   50,   57,   61,   57,   51,
       62,   64,   52,   53,   63,   63,   54,   65,   67,   56,
       55,   68,   69,   58,   70,   55,   59,   60,   71,   73,
       57,   61,   57,   72,   74,   62,   64,   76,   63,   63,
       77,   65,   78,   67,   79,   81,   68,   69,   70,   82,
     1516,   83,   84,   71,   73,   85,   86,   72,   88,   74,
       90,   76,   91,   93,   77,   94,   78,   96,   79,   81,
       87,   98,   88,   99,   82,   83,   84,   87,   87,   85,
       86,   87,   97,  100,  101,   90,  102,   91,   93,  103,

       94,  104,   96,  105,  106,   87,   98,   88,   99,  107,
      109,  111,   87,   87,  110,   87,   97,  100,  112,  101,
      113,  102,  114,  115,  103,  104,  116,  105,  118,  106,
      119,  121,  122,  107,  123,  109,  111,  124,  110,  125,
     1515,  126,  127,  112,  113,  128,  114,  115,  129,  130,
      116,  131,  118,  132,  119,  133,  121,  122,  134,  123,
      135,  145,  124,  136,  125,  126,  127,  138,  135,  128,
      141,  142,  137,  129,  130,  137,  131,  132,  140,  133,
      143,  146,  140,  134,  147,  135,  145,  136,  137,  148,
      149,  138,  135,  140,  141,  142,  151,  137,  153,  154,

      137,  155,  157,  140,  143,  146,  158,  140,  147,  160,
      156,  163,  137,  148,  149,  156,  156,  140,  164,  166,
      156,  151,  153,  154,  165,  155,  157,  167,  168,  175,
      158,  169,  168,  160,  168,  156,  163,  170,  171,  156,
      156,  172,  164,  166,  156,  173,  174,  176,  177,  165,
      178,  179,  167,  168,  175,  169,  180,  168,  181,  168,
      182,  170,  171,  183,  184,  172,  185,  186,  188,  173,
      174,  176,  187,  177,  178,  189,  179,  187,  190,  191,
      180,  192,  181,  184,  182,  193,  195,  183,  194,  184,
      196,  185,  186,  188,  198,  199,  187, 1501,  200,  201,

      189,  187,  190,  191,  202,  192, 1492,  184,  204,  205,
      193,  195,  194,  209,  208,  196,  197,  203,  198,  199,
      197,  203,  197,  200,  201,  213,  197,  214,  197,  202,
      197,  197,  204,  210,  205,  211,  212,  209,  197,  208,
      215,  197,  203,  216,  219,  197,  203,  197,  217,  213,
      197,  214,  197,  218,  197,  197,  220,  221,  210,  222,
      211,  212,  197,  223,  215,  225,  224,  226,  216,  219,
      227,  229,  217,  230,  231,  232,  234,  218,  235,  236,
      220,  221,  224,  222,  238, 1491,  239,  223,  241,  225,
      242,  224,  226,  243,  227,  229,  244,  230,  245,  231,

      232,  234,  235,  246,  236,  247,  224,  248,  250,  238,
      239,  249,  241,  251,  242,  252,  253,  243,  255,  256,
      244,  257,  245,  258, 1489,  259,  260,  262,  246,  261,
      247,  264,  248,  250,  265,  249,  263,  251,  267,  252,
      253,  263,  255,  256,  263,  257,  268,  271,  258,  259,
      270,  260,  262,  261,  272,  274,  264,  273,  275,  265,
      276,  263,  267,  277,  281,  263,  278,  279,  263,  280,
      282,  268,  271,  283,  270,  284,  285,  286,  287,  272,
      274,  273,  275,  288,  276,  291,  292,  293,  277,  281,
      278,  279,  294,  280,  295,  282,  297,  299,  283,  300,

      284,  285,  286,  287,  301, 1481,  302,  303,  288,  291,
      292,  293,  304, 1474,  305,  306,  294,  307,  295,  308,
      297,  299,  309,  310,  300,  312, 1470,  313,  314,  301,
      302,  315,  303,  317,  318,  319,  320,  304,  305,  306,
      321,  322,  307,  323,  308,  324,  325,  309,  310,  326,
      312,  313,  314,  327,  328,  329,  315,  317,  318,  319,
      330,  320,  331,  336,  321,  332,  322,  333,  323,  324,
      325,  335,  332,  337,  326,  338,  339,  327,  340,  328,
      329,  341,  342,  343,  344,  330,  345,  331,  336,  346,
      332,  333,  347,  348,  349,  335,  332,  337,  350,  351,

      338,  339,  340,  354,  355,  341,  342,  343,  357,  344,
      359,  345,  360,  361,  346,  362,  347,  363,  348,  349,
      364,  365,  350,  351,  366,  367,  368,  354,  355,  369,
     1469,  365,  357,  370,  371,  359,  373,  360,  361,  362,
      374,  363,  375,  376,  364,  365,  377,  378,  366,  379,
      367,  368,  380,  381,  369,  365,  382,  370,  383,  371,
      373,  384,  385,  387,  374,  388,  375,  376,  389,  390,
      377,  378,  393,  379,  394,  395,  396,  380,  381,  398,
      399,  382,  400,  383,  401,  402,  384,  385,  387,  403,
      388,  405,  389,  406,  390,  407,  393,  408,  409,  394,

      395,  396,  410,  398,  399,  411,  400,  404,  413,  401,
      402,  412,  414,  403,  415,  404,  405,  406,  416,  404,
      407,  408,  418,  409,  419,  420,  422,  410,  423,  411,
      424,  425,  404,  413,  426,  412,  414,  429,  415,  430,
      404,  426,  416,  404,  428,  428,  428,  418,  419,  426,
      420,  422,  423,  431,  432,  424,  425,  433,  434,  426,
      435,  429,  436,  430,  437,  440,  426,  438,  439,  441,
     1457,  442,  443,  426,  444, 1444,  445,  431,  446,  432,
      447,  433,  434,  448,  451,  435,  453,  436,  454,  437,
      440,  438,  439,  455,  441,  442,  456,  443,  458,  444,

      445,  459,  460,  446,  461,  447,  462,  448,  451,  463,
      463,  453,  454,  464,  465,  466,  467,  455,  468,  468,
      456,  469,  472,  458,  470,  459,  460,  471,  461,  473,
      475,  462,  476,  478, 1443,  479,  477,  464,  465,  466,
      477,  467,  480, 1414,  481,  482,  469,  472,  470,  483,
      485,  471,  486,  473,  475,  487,  476,  488,  478,  479,
      489,  477,  490,  494,  495,  477,  496,  480,  481,  482,
      497,  499,  500,  483,  485,  501,  486,  502,  503,  503,
      487,  488,  504,  504,  504,  489,  490,  494,  495,  505,
      496,  506,  507,  508,  497,  499,  500,  509,  510,  511,

      501,  502,  512,  513,  514,  515,  516, 1407,  517,  518,
      519,  520,  522,  523,  505,  524,  506,  507,  508,  525,
      525,  509,  510,  511,  526,  526,  512,  513,  514,  515,
      527,  516,  517,  518,  519,  520,  528,  522,  523,  529,
      524,  530, 1406,  532,  533,  533,  533,  534,  535,  536,
      537, 1401,  538,  540,  527,  539,  539,  539,  541,  542,
      528,  545,  548,  529,  550,  552,  530,  532,  544,  544,
      544,  534,  535,  536,  551,  537,  538,  540,  553,  554,
      555, 1390,  556,  541,  542,  545,  558,  548,  559,  550,
      552,  560,  561, 1362,  562,  566,  567, 1330,  551,  568,

      569,  571,  553,  554,  572,  555,  556,  570,  576,  570,
      577,  558,  573,  559,  574,  578,  560,  561,  562,  566,
      579,  567,  575,  568,  569,  571,  580,  580,  572,  581,
      575,  585,  570,  576,  570,  577,  573,  582,  574,  578,
      583,  584,  586,  587,  579,  588,  590,  575,  589,  591,
     1329,  592,  593,  581,  594,  575,  585,  595,  596,  597,
      597,  582,  598,  600,  583,  584,  586,  587,  602,  602,
      588,  590,  589,  603,  591,  592,  604,  593,  606,  594,
      607,  595,  608,  596,  609,  609,  598,  600,  601,  601,
      601,  610,  610,  610,  611,  612,  614,  615,  603,  616,

      616,  604,  606,  618,  607,  619,  620,  608,  617,  617,
      617,  621,  621,  622,  622,  623,  623,  623,  611,  624,
      612,  614,  615,  625,  625,  626,  632,  618,  627,  619,
      629,  620,  628,  628,  630,  631,  636,  637,  638,  639,
      640,  642,  642,  643,  624,  645, 1324,  646,  647,  648,
      626,  632,  627,  649,  629,  650, 1317,  652,  630,  631,
      636,  637,  638,  639,  640,  653,  654,  643,  655,  656,
      645,  646,  647,  648,  657,  658,  659,  649,  660,  661,
      650,  652,  662, 1313,  663,  664,  665, 1299,  669,  670,
      653,  654,  655,  672,  656,  673,  674,  675,  657,  678,

      658,  659,  660,  661,  676,  676,  679,  662,  663,  664,
      682,  665,  669,  683,  670,  680,  680,  672,  684,  673,
      674,  675,  685,  678,  681,  681,  681,  686, 1281,  687,
      679,  688,  688,  689,  682,  690, 1262,  691,  683,  692,
      693,  695,  684,  694,  694,  696,  685,  697,  698,  698,
      698,  700,  686,  687,  699,  699,  702,  703,  689,  705,
      690,  691,  707,  692,  708,  693,  695,  701,  701,  701,
      696,  697,  704,  704,  704,  709,  700,  710,  710,  711,
      702,  712,  703,  713,  705,  714,  715,  707,  708,  716,
      717,  717,  718, 1255,  719,  720,  721,  722, 1235,  723,

      709,  724,  729,  711,  725,  712,  727,  713,  726,  726,
      714,  715,  728,  730,  716,  731,  733,  718,  719,  720,
      734,  721,  722,  723,  736,  737,  724,  729,  725,  738,
      727,  739,  741, 1233,  742,  743,  728,  744,  730,  731,
      733,  746,  747,  748,  734,  749,  750,  751,  736,  737,
      753,  753,  754,  755,  738,  739,  756,  741,  742,  758,
      743,  759,  744,  760,  762,  746,  763,  747,  748,  749,
      750,  764,  751,  765,  766,  767,  754,  770,  755, 1231,
      756,  768,  768,  758,  773,  759,  774,  760,  762,  771,
      771,  763,  769,  769,  769,  764,  777,  765,  766,  779,

      767,  770,  772,  772,  772,  775,  775,  780,  773,  781,
      774,  776,  776,  776,  778,  782,  782,  784,  778,  783,
      777,  785,  790,  779,  787,  788,  789,  792,  793, 1185,
      795,  796,  780,  781,  797,  797,  797,  798,  778,  799,
      805,  784,  778,  801,  783,  802,  785,  790,  787,  788,
      789,  808,  792,  793,  795,  796,  803,  803,  811,  812,
      813,  798,  814,  815,  799,  805,  816,  801,  817,  802,
      820,  822,  823,  823,  824,  808,  825,  827,  827,  828,
      829,  831,  811,  812,  813,  832,  814,  815,  833,  834,
      836,  816,  837,  817,  820,  822,  838,  838,  839,  824,

      841,  825,  840,  840,  828,  829,  831,  842,  843,  843,
      832,  844,  833,  845,  834,  836,  837,  846,  847,  849,
      851,  852,  854,  839,  841,  853,  855,  856,  857, 1166,
      858,  859,  842,  860,  861,  861,  844, 1165,  845,  864,
      864,  869,  846,  847,  849,  851,  852,  854,  872,  853,
      855,  874,  856,  857,  858,  876,  859,  877,  860,  865,
      865,  865,  870,  870,  870,  869,  871,  871,  878,  879,
      880, 1164,  872,  881,  882,  883,  874,  884,  885,  876,
      886,  877,  887,  888,  890,  890,  891,  892,  893,  894,
      894,  895,  896,  878,  879,  880,  898,  881,  882,  883,

      899,  884,  885,  900,  886,  901,  887,  888,  897,  897,
      891,  892,  893,  902,  902,  895,  896,  905,  906,  909,
      898,  910,  911,  913,  899,  914,  915,  900,  916,  917,
      901,  918,  919, 1163,  921,  922,  923,  924,  925,  925,
      927,  905,  906,  929,  909,  910,  911,  913, 1159,  914,
      915, 1158,  916,  917,  933,  918,  934,  919,  921,  922,
      935,  923,  924,  926,  926,  927,  928,  928,  929,  930,
      930,  931,  931,  931,  932,  932,  932,  936,  933,  938,
      934,  939,  940,  942,  935,  943, 1152,  944,  945,  946,
      947,  950,  953,  953,  954,  955,  957,  959,  947,  976,

      976,  936,  961,  938,  960,  939,  940,  942,  962,  963,
      943,  944,  965,  945,  946,  947,  950,  966,  954,  955,
      957,  959,  967,  947,  958,  958,  958,  961,  960,  969,
      964,  971,  962,  963,  964,  970,  965,  972, 1129,  973,
      974,  978,  966,  975,  979,  980,  967,  981,  981,  982,
      983,  984,  984,  969,  987,  964,  971,  989,  964,  970,
      985,  985,  972,  973,  990,  974,  978,  975,  991,  979,
      980,  992,  997,  982,  983,  986,  986,  986,  987,  993,
      994,  996,  989,  998, 1124,  999, 1000, 1001, 1002,  990,
     1003, 1004, 1004,  991, 1005, 1006,  992,  997, 1007, 1120,

     1008, 1010, 1011,  993,  994,  996, 1012, 1012,  998,  999,
     1000, 1001, 1002, 1014, 1018, 1003, 1015, 1017, 1005, 1019,
     1006, 1020, 1021, 1007, 1008, 1022, 1010, 1011, 1013, 1013,
     1013, 1024, 1119, 1025, 1026, 1107, 1027, 1028, 1014, 1018,
     1015, 1017, 1030, 1019, 1032, 1020, 1033, 1021, 1034, 1022,
     1031, 1031, 1035, 1036, 1037, 1040, 1024, 1025, 1041, 1026,
     1027, 1042, 1028, 1038, 1038, 1043, 1048, 1030, 1032, 1044,
     1046, 1033, 1034, 1049, 1050, 1051, 1035, 1036, 1037, 1040,
     1055, 1057, 1041, 1058, 1060, 1042, 1056, 1056, 1056, 1059,
     1043, 1048, 1061, 1044, 1046, 1062, 1063, 1049, 1050, 1051,

     1064, 1064, 1065, 1066, 1055, 1068, 1057, 1069, 1058, 1060,
     1067, 1067, 1067, 1059, 1070, 1102, 1071, 1061, 1072, 1062,
     1063, 1073, 1074, 1074, 1075, 1076, 1065, 1066, 1078, 1083,
     1068, 1069, 1080, 1081, 1082, 1084, 1085, 1067, 1086, 1070,
     1071, 1089, 1072, 1090, 1098, 1091, 1073, 1092, 1093, 1075,
     1076, 1094, 1096, 1078, 1083, 1095, 1080, 1081, 1082, 1097,
     1084, 1085, 1086, 1099, 1100, 1101, 1089, 1105, 1090, 1091,
     1106, 1092, 1108, 1093, 1103, 1103, 1094, 1096, 1109, 1095,
     1104, 1104, 1104, 1110, 1097, 1111, 1112, 1113, 1099, 1100,
     1101, 1105, 1114, 1114, 1114, 1106, 1115, 1108, 1116, 1117,

     1118, 1121, 1109, 1122, 1122, 1123, 1125, 1130, 1110, 1111,
     1112, 1126, 1113, 1127, 1127, 1128, 1131, 1087, 1132, 1133,
     1115, 1134, 1116, 1117, 1118, 1121, 1135, 1135, 1137, 1138,
     1123, 1125, 1130, 1140, 1141, 1126, 1142, 1143, 1150, 1128,
     1144, 1131, 1132, 1133, 1145, 1134, 1146, 1147, 1148, 1149,
     1151, 1151, 1137, 1138, 1153, 1154, 1079, 1140, 1141, 1155,
     1142, 1156, 1143, 1150, 1144, 1157, 1160, 1169, 1145, 1170,
     1146, 1147, 1148, 1149, 1161, 1161, 1167, 1167, 1153, 1168,
     1154, 1168, 1168, 1155, 1172, 1156, 1162, 1162, 1162, 1157,
     1160, 1169, 1171, 1173, 1170, 1171, 1174, 1174, 1174, 1175,

     1177, 1178, 1077, 1181, 1182, 1182, 1182, 1183, 1172, 1184,
     1186, 1187, 1188, 1189, 1190, 1191, 1171, 1193, 1173, 1171,
     1194, 1054, 1195, 1175, 1197, 1177, 1178, 1181, 1196, 1196,
     1198, 1199, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1200,
     1191, 1201, 1193, 1202, 1204, 1194, 1195, 1206, 1197, 1203,
     1203, 1205, 1205, 1213, 1198, 1199, 1207, 1207, 1208, 1208,
     1209, 1209, 1214, 1200, 1211, 1211, 1201, 1202, 1215, 1204,
     1212, 1212, 1206, 1210, 1210, 1210, 1216, 1217, 1213, 1218,
     1219, 1219, 1220, 1220, 1220, 1221, 1214, 1223, 1053, 1224,
     1225, 1226, 1226, 1215, 1227, 1227, 1227, 1228, 1229, 1230,

     1216, 1217, 1232, 1218, 1234, 1045, 1236, 1237, 1238, 1239,
     1221, 1241, 1223, 1224, 1225, 1240, 1240, 1240, 1242, 1243,
     1246, 1228, 1244, 1229, 1230, 1245, 1232, 1248, 1249, 1234,
     1236, 1237, 1238, 1039, 1239, 1241, 1247, 1247, 1247, 1250,
     1250, 1250, 1256, 1242, 1243, 1246, 1244, 1253, 1253, 1245,
     1257, 1248, 1249, 1251, 1251, 1251, 1252, 1252, 1252, 1254,
     1254, 1254, 1258, 1029, 1259, 1263, 1256, 1261, 1261, 1264,
     1265, 1266, 1266, 1267, 1268, 1257, 1269, 1270, 1271, 1272,
     1272, 1273, 1274, 1023, 1275, 1276, 1277, 1258, 1259, 1278,
     1263, 1282, 1274, 1274, 1264, 1265, 1285, 1267, 1283, 1268,

     1269, 1270, 1271, 1279, 1279, 1273, 1284, 1274, 1275, 1276,
     1277, 1286, 1289, 1278, 1290, 1282, 1274, 1274, 1280, 1280,
     1280, 1285, 1283, 1287, 1287, 1288, 1288, 1288, 1291, 1291,
     1284, 1292, 1292, 1292, 1300, 1286, 1289, 1293, 1293, 1290,
     1294, 1294, 1294, 1295, 1295, 1296, 1296, 1296, 1297, 1297,
     1301, 1302, 1303, 1303, 1304, 1016, 1305, 1306, 1300, 1307,
     1009, 1308, 1309, 1310,  988, 1311, 1312, 1312, 1312, 1314,
     1315,  977, 1316, 1318, 1319, 1301, 1302, 1320, 1323, 1304,
     1305, 1306, 1321, 1321, 1307, 1308, 1325, 1309, 1310, 1311,
     1322, 1322, 1326, 1314, 1327, 1315, 1316, 1335, 1318, 1319,

     1328, 1328, 1320, 1323, 1331, 1331, 1332, 1332, 1333, 1333,
     1325, 1334, 1334, 1336, 1337, 1344, 1326, 1339, 1342, 1327,
     1345, 1335, 1338, 1338, 1338, 1346, 1347, 1347, 1348, 1348,
     1348, 1349, 1350,  956, 1351, 1352, 1354, 1336, 1353, 1337,
     1344, 1339, 1342, 1355, 1345, 1356, 1357, 1357, 1357, 1346,
     1358, 1359, 1360,  952, 1361, 1366, 1349, 1350, 1351, 1367,
     1352, 1354, 1353, 1363, 1363, 1364, 1364, 1368, 1355, 1371,
     1356, 1365, 1365, 1369, 1369, 1358, 1359, 1360, 1361, 1372,
     1366, 1370, 1370, 1370, 1367, 1373, 1374, 1375, 1376, 1376,
     1377, 1368, 1378, 1379, 1371, 1380, 1381, 1382, 1383,  951,

     1384, 1385, 1385, 1387, 1372, 1386, 1386, 1386, 1388, 1373,
     1389, 1374, 1375, 1391, 1377,  949, 1378, 1394, 1379, 1380,
     1395, 1381, 1382, 1383, 1384, 1396, 1398, 1387, 1392, 1392,
     1392, 1400, 1388, 1402, 1389, 1397, 1397, 1391, 1393, 1393,
     1393, 1394, 1403, 1404, 1395, 1405, 1408, 1409, 1410, 1396,
     1398, 1411, 1411, 1412, 1413, 1416, 1400, 1402, 1415, 1415,
     1417, 1417, 1418, 1418, 1418, 1419, 1419, 1403, 1404, 1405,
     1421, 1408, 1409, 1410, 1420, 1420, 1420, 1422, 1412, 1413,
     1416, 1423, 1425,  948, 1426, 1428, 1429, 1430,  941, 1431,
     1432,  937, 1433, 1434, 1435, 1421, 1436, 1437, 1438, 1438,

     1439, 1439, 1422, 1440, 1441, 1441, 1423, 1425, 1426, 1428,
     1429, 1445, 1430, 1431, 1446, 1432, 1433, 1434, 1435, 1447,
     1436, 1437, 1442, 1442, 1449,  920, 1450, 1440, 1451,  908,
     1452, 1453, 1454, 1455, 1456, 1445, 1458, 1458, 1446, 1459,
     1460, 1460, 1463, 1447, 1461, 1461, 1464,  907, 1465, 1449,
     1450, 1466, 1467, 1451, 1452, 1453, 1454, 1468, 1455, 1456,
     1471, 1472, 1477, 1459, 1473, 1473, 1478, 1463, 1475, 1475,
     1479, 1464, 1465, 1476, 1476, 1466, 1467, 1480,  904, 1482,
     1485, 1468, 1483, 1483, 1471, 1472, 1477, 1484, 1484, 1486,
     1478, 1487, 1487, 1488, 1479, 1490, 1493, 1494, 1495, 1495,

     1496, 1496, 1480, 1482, 1497, 1485, 1498, 1499, 1500, 1502,
     1502, 1503, 1503, 1504, 1486, 1505,  903, 1506, 1488, 1490,
     1493, 1507, 1494, 1508,  863, 1509, 1510, 1513, 1497, 1514,
     1498, 1499, 1517, 1500, 1511, 1511, 1518,  862, 1504, 1519,
     1505, 1506, 1512, 1512, 1512, 1507, 1520, 1520, 1508, 1509,
     1522, 1510, 1513, 1514, 1523, 1526, 1517, 1521, 1521, 1521,
     1527, 1518, 1528, 1519, 1524, 1524, 1525, 1525, 1529, 1529,
     1530, 1531, 1534,  850, 1522, 1532, 1532, 1532, 1523, 1526,
     1533, 1533, 1533, 1535, 1527, 1536, 1528, 1537, 1538, 1539,
     1539, 1540, 1540, 1540, 1530, 1543, 1531, 1534, 1541, 1541,

     1542, 1542, 1542, 1545, 1548, 1548, 1550, 1535, 1551, 1536,
     1552, 1537, 1538, 1549, 1549, 1553, 1554,  848, 1555, 1556,
     1543, 1557,  835, 1558, 1559, 1560, 1565, 1545, 1561, 1562,
     1563, 1550, 1564, 1551, 1552, 1567,  830, 1569, 1571, 1553,
     1570, 1554, 1555, 1556, 1572, 1574, 1557, 1558, 1573, 1559,
     1560, 1565, 1561, 1562, 1563, 1575, 1564, 1579, 1570, 1578,
     1567, 1569, 1571, 1580, 1586, 1570, 1581, 1582, 1583, 1572,
     1574, 1585, 1573, 1587, 1587, 1590, 1590, 1591, 1591, 1592,
     1575, 1579, 1570, 1594, 1578, 1593, 1593, 1595, 1580, 1586,
     1581, 1582, 1583, 1596,  826, 1585, 1598, 1598, 1599, 1599,

      821,  819,  818, 1592,  810,  809,  807,  804, 1594,  794,
      791,  786, 1595,  761,  757,  752,  745, 1596, 1601, 1601,
     1601, 1602, 1602, 1605, 1605,  740,  735,  732,  706,  671,
      668,  667,  666,  651,  644,  635,  634,  633,  613,  605,
      599,  565,  564,  557,  549,  547,  546,  543,  531,  521,
      498,  493,  492,  491,  484,  474,  452,  450,  449,  427,
      421,  417,  397,  392,  391,  386,  372,  356,  353,  352,
      334,  316,  311,  298,  296,  290,  289,  269,  266,  254,
      233,  228,  207,  206,  162,  161,  159,  152,  150,  144,
      139,  120,  117,  108,   95,   92,   89,   80,   75,   66,

       46,   26,    7,    3, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex_conf.l"
#line 2 "lex_conf.l"
#include <math.h>
#include <ctype.h>
#include <stdlib.h>

#include "configManagement.h"
#include "attributesInfo.h"
#include "random.h"
#include "messageBuffer.h"

char *charFilter(char *string);
extern configManagement cm;
extern attributesInfo ai;
extern Random rnd;
extern messageBuffer mb;


#line 1716 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 23 "lex_conf.l"


#line 1901 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1601 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3205 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "lex_conf.l"
{
/*	int atributs=atoi(charFilter(yytext));
	ai.setNumAttributes(atributs);
	mb.printf("Number of attributes in domain:%d\n"
		,atoi(charFilter(yytext)));*/
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_CROSSOVER);
	mb.printf("Crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POP_SIZE);
	mb.printf("Popsize: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS);
	mb.printf("GA Iterations:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MIN_CLASSIFIERS);
	mb.printf("Minumum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MAX_CLASSIFIERS);
	mb.printf("Maximum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lex_conf.l"
{
	cm.setParameter(1,IGNORE_MISSING_VALUES);
	mb.printf("Ignore missing values\n");
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "lex_conf.l"
{
	cm.setParameter(1,DUMP_EVOLUTION_STATS);
	mb.printf("Dump learning process statistics at each iteration\n");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "lex_conf.l"
{
	if(!strcasecmp(yytext+20,"TOURNAMENT")) {
		cm.setParameter(TOURNAMENT_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection Algorithm\n");
	} else if(!strcasecmp(yytext+20,"TOURNAMENTWOR")) {
		cm.setParameter(TOURNAMENT_WOR_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection without replacement Algorithm\n");
	} else if(!strcasecmp(yytext+20,"PARETO")) {
		cm.setParameter(PARETO_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Pareto Selection Algorithm\n");
	} else {
		mb.printf("Unknown selection algorithm:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),TOURNAMENT_SIZE);
	mb.printf("Tournament size:%f\n",atof(charFilter(yytext)));
}										
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "lex_conf.l"
{
	cm.setParameter(1,SHOW_FRONTS);
	mb.printf("Show Pareto Fronts\n");
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "lex_conf.l"
{
	if(!strcasecmp(&yytext[19],"1PX")) {
		cm.setParameter(CROSS_1P,CROSSOVER_OPERATOR);
		mb.printf("One Point Crossover\n");
	} else if(!strcasecmp(&yytext[19],"2PX")) {
		cm.setParameter(CROSS_2P,CROSSOVER_OPERATOR);
		mb.printf("Two Points Crossover\n");
	} else if(!strcasecmp(&yytext[19],"INFORMED")) {
		cm.setParameter(CROSS_INFORMED,CROSSOVER_OPERATOR);
		mb.printf("Informed Crossover\n");
	} else {
		mb.printf("Unknown crossover operator:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "lex_conf.l"
{
	if(!strcasecmp(yytext+17,"ACCURACY")) {
		cm.setParameter(MAXIMIZE,MAX_MIN);
		cm.setParameter(ACCURACY,FITNESS_FUNCTION);
		mb.printf("Squared accuracy fitness function\n");
	} else if(!strcasecmp(yytext+17,"MDL")) {
		cm.setParameter(MINIMIZE,MAX_MIN);
		cm.setParameter(MDL,FITNESS_FUNCTION);
		mb.printf("MDL fitness function\n");
	} else {
		mb.printf("Unknown fitness function:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT);
	mb.printf("MDL fixed weight %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT_RELAX_FACTOR);
	mb.printf("MDL Weight relax factor %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MDL_INITIAL_TL_RATIO);
	mb.printf("Initial theory length proportion in MDL formula: %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MDL_ITERATION);
	mb.printf("Iteracio activacio MDL %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_ITERATION);
	mb.printf("Pruning operator activated at iteration:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 153 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_MIN_CLASSIFIERS);
	mb.printf("Pruning stops if #classifiers is less that %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD);
	mb.printf("The number of min classifiers is automatically set\n");
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD2);
	mb.printf("The number of min classifiers is automatically set2\n");
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 167 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PRUNING_AUTO_OFFSET);
	mb.printf("The min classifiers offset %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_INDIVIDUAL_MUTATION);
	mb.printf("Individual-wise mutation probability:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 177 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,HIERARCHICAL_SELECTION_ITERATION);
	mb.printf("Hierarchical selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 183 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),HIERARCHICAL_SELECTION_THRESHOLD);
	mb.printf("Hierarchical selection threshold :%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 189 "lex_conf.l"
{
	cm.setParameter(1,HIERARCHICAL_SELECTION_USES_MDL);
	mb.printf("Hierarchical selection uses MDL Theory Length\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "lex_conf.l"
{
	cm.setParameter(1,CHECK_WINDOWING);
	mb.printf("Performance tests of windowing enabled");
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 199 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_ILAS);
	mb.printf("ILAS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 204 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_GWS);
	mb.printf("GWS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 210 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_ONE);
	mb.printf("Probability of value ONE for GABIL and ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SHARP);
	mb.printf("Probability of value Sharp for LCS/Instances KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "lex_conf.l"
{
	cm.setParameter(1,KR_ADI);
	mb.printf("Using Adaptive Discretization Intervals Knowledge Representation\n");
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 227 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_MERGE);
	mb.printf("Probability of merge operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 233 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_SPLIT);
	mb.printf("Probability of split operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 239 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE);
	mb.printf("Probability of reinitialize operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 245 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE_AT_END);
	mb.printf("Probability of reinitialize operator at final iteration in ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MAX_INTERVALS);
	mb.printf("Maximum number of intervals per attribute in ADI KR:%d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 257 "lex_conf.l"
{
	cm.setParameter(1,KR_HYPERRECT);
	mb.printf("Using HYPERRECT Knowledge Representation\n");
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 262 "lex_conf.l"
{
	cm.setParameter(1,KR_LCS);
	mb.printf("Using LCS Knowledge Representation\n");
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 267 "lex_conf.l"
{
	cm.setParameter(1,KR_INSTANCE_SET);
	mb.printf("Using Instance Set/1-NN Knowledge Representation\n");
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 272 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,ALPHA_OF_BLX);
	mb.printf("Using BLX crossover with alpha:%f\n" 
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 278 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,D_OF_FR);
	mb.printf("Using FR crossover with D:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 283 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,N_OF_SBX);
	mb.printf("Using SBX crossover with N:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "lex_conf.l"
{
	rnd.setSeed((unsigned long int)atof(charFilter(yytext)));
	mb.printf("Random seed specified:%s\n",yytext+12);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 293 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE);
	mb.printf("Penalize the individuals that have a size less than %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 299 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE_AT_END);
	mb.printf("Penalize the individuals that have a size less than %d at end\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 305 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PARETO_SELECTION_ITERATION);
	mb.printf("Pareto selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 312 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)) ,TOTAL_TIME);
	mb.printf("Time spent on the learning process %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 318 "lex_conf.l"
{
	if(!strcasecmp(yytext+14,"MAJOR")) {
		cm.setParameter(MAJOR,DEFAULT_CLASS);
		mb.printf("Majoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"MINOR")) {
		cm.setParameter(MINOR,DEFAULT_CLASS);
		mb.printf("Minoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"DISABLED")) {
		cm.setParameter(DISABLED,DEFAULT_CLASS);
		mb.printf("Default class disabled\n");
	} else {
		cm.setParameter(atoi(charFilter(yytext)) ,DEFAULT_CLASS);
		mb.printf("Default class set to class :%d\n",atoi(charFilter(yytext)));
	}
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 334 "lex_conf.l"
{
	cm.setParameter(1 ,SMART_INIT);
	mb.printf("Initialization uses examples to create the initial rules\n");
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 339 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_INIT);
	mb.printf("Instances used in initialization are sampled with uniform class distribution\n");
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 344 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_ACC);
	mb.printf("Training accuracy computation will be class-wise\n");
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 350 "lex_conf.l"
{
	cm.setParameter(1 ,DUMP_ACTIVATION);
	mb.printf("Dump average activation after initialization\n");
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 356 "lex_conf.l"
{
	 if(!strcasecmp(yytext+15,"FTB")) {
		cm.setParameter(FTB,PRUNING_POLICY);
		mb.printf("Rule pruning policy is front to back\n");
	} else if(!strcasecmp(yytext+15,"BTF")) {
		cm.setParameter(BTF,PRUNING_POLICY);
		mb.printf("Rule pruning policy is back to front\n");
	} else if(!strcasecmp(yytext+15,"RANDOM")) {
		cm.setParameter(RANDOM,PRUNING_POLICY);
		mb.printf("Rule pruning policy is random\n");
	} else {
		mb.printf("Unknown pruning policy:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 373 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SMART_CROSSOVER);
	mb.printf("Smart crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 378 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),NUM_PARENTS_SMART_CROSSOVER);
	mb.printf("Number of parents in smart crossover: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 384 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),FILTER_SMART_CROSSOVER);
	mb.printf("Smart crossover filter threshold: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 390 "lex_conf.l"
{
	cm.setParameter(1,ADD_RULES_SMART_CROSSOVER);
	mb.printf("Smart crossover adds new rules\n");
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 395 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_ORDERING);
	mb.printf("Number of repetitions of the rule ordering process in SmartX: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 400 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_WITH_SMART_CROSSOVER);
	mb.printf("Elitism stage will use smart crossover\n");
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 404 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_LAST_ITERATION_WITH_SMART_CROSSOVER);
	mb.printf("Last iteration of elitism stage will use smart crossover\n");
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 410 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_CLEANING_PROB);
	mb.printf("Rule cleaning probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 415 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_GENERALIZING_PROB);
	mb.printf("Rule generalizing probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 421 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),DUMP_GENOTYPE_ITERATIONS);
	mb.printf("Genotype of best individual is dumped every %d iterations\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 426 "lex_conf.l"
{
	mb.enable();
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 430 "lex_conf.l"
{
	mb.printf("Crossover will use informed cut points (cutPoints.dat)\n");
	cm.setParameter(1,INFORMED_CROSSOVER);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 435 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_INIT);
	mb.printf("Coverage ratio in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 440 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),EXPRESSED_ATT_INIT);
	mb.printf("Number of expressed attributes in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 445 "lex_conf.l"
{
	mb.printf("Initialidation will always generate individuals with a fixed number of expressed attributes\n");
	cm.setParameter(1,FIX_EXPRESSED_ATTS_INIT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 452 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_BREAKPOINT);
	mb.printf("Coverage breakpoint for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 457 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_RATIO);
	mb.printf("Coverage ratio for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 463 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_LEARNING);
	mb.printf("Number of times we will try to learn a rule from the current training set: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 469 "lex_conf.l"
{
	mb.printf("Hyperrectangle attribute list knowledge representation\n");
	cm.setParameter(1,HYPERRECT_LIST);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 474 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_GENERALIZE_LIST);
	mb.printf("Probability of generalizing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 479 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SPECIALIZE_LIST);
	mb.printf("Probability of specializing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 484 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MIN_INTERVAL_SIZE_INIT);
	mb.printf("Lower bound of attribute interval: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 489 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MAX_INTERVAL_SIZE_INIT);
	mb.printf("Upper bound of attribute interval: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 494 "lex_conf.l"
{
	/*mb.printf("Intervalar representation will use rotations\n");
	cm.setParameter(1,ROTATE_HYPERRECTANGLES);*/
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 499 "lex_conf.l"
{
	/*mb.printf("Only a subset of attributes will be rotated (rotatedAttributes.dat)\n");
	cm.setParameter(1,RESTRICTED_ROTATED_ATTRIBUTES);*/
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 505 "lex_conf.l"
{
	/*cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_INIT);
	mb.printf("Probability of setting an angle to 0 degrees in initialization: %f\n",atof(charFilter(yytext)));*/
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 510 "lex_conf.l"
{
	/*cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_MUT);
	mb.printf("Probability of setting an angle to 0 degrees in mutation: %f\n",atof(charFilter(yytext)));*/
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 515 "lex_conf.l"
{
	mb.printf("Dump statistics of the attributes in the ALKR representation\n");
	cm.setParameter(1,DUMP_ATTRIBUTE_STATISTICS);
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 520 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MAX_RULES);
	mb.printf("Maximum number of rules learnt with BioHEL: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 526 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with greater than predicates\n");
	cm.setParameter(1,USE_GREATER_THAN_PREDICATES);
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 531 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with less than predicates\n");
	cm.setParameter(1,USE_LESS_THAN_PREDICATES);
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 536 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with ratio predicates\n");
	cm.setParameter(1,USE_RATIO_PREDICATES);
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 541 "lex_conf.l"
{
    mb.printf("Use hyperrect list real KR with mixed predicates\n");
    cm.setParameter(1,USE_MIXED_PREDICATES);
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 546 "lex_conf.l"
{
    cm.setParameter(atof(charFilter(yytext)),MAX_RATIO);
    mb.printf("Use a max ratio limit of: %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 551 "lex_conf.l"
{
	mb.printf("The creation of the strata in the ILAS windowing will use the DOB method\n");
	cm.setParameter(1,DOB_PARTITIONS_IN_WINDOWING);
}
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 559 "lex_conf.l"
/* eat up one-line comments */
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 561 "lex_conf.l"
/* eat up whitespace */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 563 "lex_conf.l"
mb.printf( "Unrecognized character: %s\n", yytext );
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 565 "lex_conf.l"
ECHO;
	YY_BREAK
#line 2795 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1601 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1601 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1600);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 565 "lex_conf.l"


int yywrap ()
{
	return 1;
}

char *charFilter(char *string)
{
	while(*string && !(isdigit(*string) || *string=='-')) string++;
	return string;
}

void parseConfig(char *configFile)
{
	yyin = fopen( configFile, "r" );
	yylex();
}								 

