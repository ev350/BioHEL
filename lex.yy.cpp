#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1576] =
    {   0,
        0,    0,   92,   90,   89,   89,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   89,    0,   88,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   32,    0,    0,   39,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,   42,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    3,    0,
        0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   42,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   83,
        0,    0,    0,    0,    0,    0,   43,   43,    0,    0,

        0,    0,    0,    3,    3,    0,    0,    0,    0,   30,
       30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,   38,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    3,    0,
        0,    0,   33,   30,    0,   31,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       33,   33,    0,   31,   31,    0,    0,   34,   34,    0,
        0,    0,    0,    0,   44,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   41,    0,
        0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
        0,   31,    0,    0,   34,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   41,   41,   65,   27,   51,    0,
       67,    0,    0,   49,    0,   53,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
       37,    0,    0,    0,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   29,    0,    0,   41,    0,   67,
       67,   71,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,    0,    0,    2,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
        0,    0,   67,   71,   71,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    2,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
        0,    0,    0,    0,    0,   71,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,    0,    0,    0,   66,
        0,    0,    0,   14,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,   18,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,   35,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
        0,    0,    0,    0,   86,    0,   70,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,   81,    0,   22,    0,    0,    0,
        0,    0,    0,   62,   62,    0,    9,    0,    0,    0,

       70,   70,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
        0,   74,    0,    0,   55,   75,   80,   81,   81,   20,
        0,    0,    0,    0,   78,   62,    0,    0,    0,    0,
       70,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   16,   16,    0,    0,    0,    0,    0,
        0,   74,   74,    0,    0,   55,   55,   75,   75,   80,
       80,   81,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,    0,    0,
        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,

        0,    0,   74,    0,    0,   55,   75,   80,    0,    0,
        0,    0,   63,    0,   85,   58,    0,   82,    0,    0,
        0,   57,   57,    0,    0,    0,    0,    0,    0,    0,
        0,   15,    0,    0,    0,    0,    0,    0,    0,   19,
        0,    0,    0,   63,   63,    0,    0,    0,    0,    0,
       57,    0,    0,    0,    0,    0,    0,    0,    0,   15,
       15,    0,    0,    0,    0,    0,   23,   36,    0,    0,
        0,   63,    0,   87,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   15,    0,    0,    0,    0,
        0,   23,   23,   36,   36,    0,    0,    0,   84,    0,

        0,   60,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   47,    0,   23,   36,    0,    0,    0,
        0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   56,    0,    0,    0,   79,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
       59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   68,    0,    0,    0,    0,    0,    0,    0,    6,
        5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,   25,    0,    0,    0,
        0,    0,    0,    0,   25,   25,    0,    0,    0,    0,

        0,    0,    0,   25,    0,    0,   77,   76,    0,    0,
        0,    0,    0,   77,   77,   76,   76,    0,    0,    0,
        0,   73,   77,   76,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   61,    0,    0,    0,    0,    0,    0,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   45,    0,    0,   64,    0,    0,
        0,    0,    0,   46,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    1,    8,    8,    9,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       19,   26,   27,   28,   29,   30,   31,   32,   33,   34,
        1,    1,    1,    1,    1,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   19,   44,   45,   46,   47,
       48,   49,   19,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1582] =
    {   0,
        0,    0, 3152, 3153,   57,   60, 3148,   52,   38,   51,
       65,   50,   60,   65,   64,   50,   96,   98,  109,  114,
      133,   62,   61,   64,  138, 3147, 3153,  107,  105,  106,
      122,  142,  102,  134,  136,  148,  153,  144,  150,  153,
      155,  146,  150,  168,  162, 3145,  146,  159,  168,  168,
      174,  173,  177,  178,  183,  183,  192,  182,  192,  193,
      194,  211,  197,  208,  205, 3144,  212,  217,  221,  208,
      225,  217,  225,  235, 3143,  223,  223,  225,  232, 3142,
      230,  246,  238,  239,  238,  241,  271,  265, 3141,  253,
      258, 3140,  260,  266, 3139,  267,  270,  269,  270,  266,

      285,  283,  286,  271,  278,  295,  284, 3138,  298,  289,
      302,  305,  301,  296,  298,  300, 3137,  300,  306, 3136,
      314,  319,  321,  324,  330,  316,  317,  320,  331,  340,
      339,  321,  333,  347,  343,  342,  358,  346, 3135,  369,
      343,  351,  354, 3134,  344,  358,  357,  364,  363, 3133,
      385, 3132,  371,  379,  379,  391,  379,  381, 3131,  385,
     3130, 3129,  409,  392,  405,  404,  411,  423,  401,  403,
      403,  399,  416,  417,  424,  425,  438,  422,  433,  431,
      430,  432,  437,  432,  455,  450,  447,  458,  467,  452,
      454,  454,  477,  465,  473,  474,  506,  472,  474,  480,

      482,  487,  522,  477,  496, 3128, 3127,  504,  481,  507,
      525,  496,  516,  517,  528,  513,  514,  532,  520,  527,
      527,  532,  550,  536,  556,  550, 3126,  548,  551,  568,
      567, 3125,  569,  564,  568, 3153,  574,  563, 3153,  564,
      572,  573,  565,  571,  584,  583,  582,  593,  579,  585,
      586, 3124,  585,  586,  596,  610,  605,  611,  607,  618,
      616,  621,  623, 3123,  609,  630, 3122,  624,  633,  630,
      625,  635,  627,  634,  645,  636,  638,  650,  656,  656,
      661,  658,  659,  667,  668, 3121, 3120,  657,  658,  660,
      665,  668, 3119,  665, 3118,  668,  666,  685,  678,  685,

      685,  681,  685,  704,  703,  705, 3117,  706,  697,  700,
      705, 3116,  695,  704,  705,  718,  707,  722,  723,  716,
      718,  725,  717,  733,  730,  742,  743,  745,  730, 3115,
      741,  742,  741,  753,  757,  751,  751,  752,  756,  763,
      768,  773,  759,  769,  766,  764, 3114, 3113,  771,  770,
     3112,  775,   76,  790,  786,  787,  783,  790,  790,  795,
      795,  804,  806,  804,  796,  810, 3111,  797,  809,  808,
      813,  811,  812,  824,  830,  828,  839,  834,  834, 3110,
      836,  843,  836,  848, 3109, 3108,  837,  851,  848,  853,
     3107,  849,  847,  849,  858,  860,  856,  871,  870,  862,

      884,  859,  890,  887,  882,  884,  884,  886,  888,  884,
     3106,  889,  899, 3105,  907,  896,  908,  908,  923, 3104,
      943,  903,  902,  903,  910,  909,  911,  932,  927,  945,
      929,  933,  944,  951,  937,  953,  958,  944,  955,  960,
      944, 3103,  952, 3102,  966,  950,  951,  960,  117,  974,
      960,  961,  970,  974,  500,  969,  974,  974,  991, 1000,
      988,  987,  986,  998,  990, 3101,  990,  993, 1008, 1009,
     1002, 1014, 1004, 1009, 1007, 3100, 1006, 1007, 1023, 1011,
     1026, 1016, 3099, 3098, 1019, 1029, 1025, 1031, 3097, 1034,
     1038, 1054, 1042, 1063, 1068, 1057, 1051, 1063, 1069, 1054,

     1050, 1059, 1059, 1062, 1068, 1066, 1085, 1074, 1072, 1074,
     1073, 3096, 1090, 1089, 1094, 1100, 1085, 1083, 1095, 1100,
     3095, 1094, 1123, 1097, 1106, 1107, 1105, 1112, 1140, 1112,
     1129, 1123, 3094, 1144, 1117, 3093, 3092, 1132, 3091, 1144,
     1128, 1147, 1135, 1142, 1155, 1143, 3090, 1157, 1154, 1163,
     1164, 1149, 3153, 3089, 3088, 1151, 1161, 1156, 1166, 1166,
     1158, 1163, 1161, 1192, 1169, 1177, 1176, 1181, 1209, 1186,
     1195, 1193, 1193, 1193, 1198, 1196, 1208, 1201, 1214, 1217,
     1212, 1218, 1220, 1216, 1223, 1246, 1216, 3087, 1228, 1252,
     1228, 1238, 3086, 1234, 1236, 1251, 1261, 1267, 1243, 1258,

     3085, 1266, 1266, 1272, 1276, 1257, 1267, 1276, 1283, 1285,
     1291, 1278, 1293, 1293, 1286, 1300, 1287, 1289, 1289, 1299,
     3084, 3083, 3082, 1292, 1293, 1297, 1301, 1302, 3153, 1316,
     1299, 3081, 1317, 1303, 1301, 1312, 1325, 3080, 1313, 1318,
     1328, 1322, 1338, 1323, 1331, 1340, 1331, 1336, 1337, 1335,
     1340, 1352, 3079, 3078, 3077, 1340, 1357, 3076, 1351, 1353,
     1350, 1354, 1376, 3153, 1354, 1359, 1363, 1372, 1365, 1371,
     1383, 1373, 1395, 1392, 1394, 1382, 1383, 1394, 1411, 1400,
     1398, 1392, 1417, 1419, 1419, 1435, 1408, 1412, 1439, 1420,
     3075, 1428, 1416, 1437, 1442, 1428, 1429, 1430, 1441, 1441,

     1444, 1457, 1444, 1439, 1445, 1455, 1444, 1462, 1449, 1470,
     1452, 1460, 1461, 1468, 1468, 3074, 1465, 1464, 3073, 1466,
     1472, 1486, 1479, 3072, 1485, 1479, 1492, 1490, 3071, 1483,
     1501, 1500, 1491, 1496, 1507, 3062, 1493, 1508, 1506, 3061,
     1510, 1502, 1508, 3060, 1514, 1519, 1509, 1518, 1511, 1538,
     1544, 1557, 1529, 1549, 1563, 1530, 1527, 1567, 1572, 1546,
     1558, 1549, 1570, 1566, 1580, 1569, 1562, 1578, 3059, 1560,
     1571, 1562, 1580, 3057, 1585, 3056, 1573, 1574, 1596, 1579,
     1596, 3153, 1587, 1591, 1619, 3048, 1603,    0, 3046, 1598,
     2987, 2979, 1601, 1601, 1608, 1606, 1609, 1624, 1621, 2975,

     2969, 1617, 2965, 1614, 1635, 1626, 1629, 2925, 1639, 1640,
     1641, 2891, 1642, 1645, 1634, 1644, 2832, 1649, 1646, 1660,
     1646, 1664, 1643, 1660, 1670, 1667, 1668, 1667, 1667, 2801,
     1676, 2746, 1680, 1680, 1670, 1675, 1670, 1683, 1688, 1675,
     1683, 1694, 2743, 2700, 1696, 1705, 3153, 3153, 3153, 1683,
     1720, 1724, 1688,    0, 1703, 3153, 1698, 1703, 1719, 1721,
     1726, 1714, 1716, 1713, 1721, 1714, 1714, 1715, 1725, 3153,
     1742, 1727, 1724, 1727, 1747, 1725, 1737, 1765, 1736, 1744,
     1752, 1765, 1771, 2659, 2653, 1749, 1757, 2647, 2608, 1770,
     1761, 1765,    0, 1763, 1765, 1764, 1765, 1769, 1773, 1779,

     2591, 1777, 1775, 1786, 1796, 1818, 1794, 1820, 1791, 1824,
     1828, 1831, 1794, 1798, 1802, 1813, 2525, 1817, 1818, 1819,
     2518, 1819, 1834, 1823, 1841, 1838, 1843, 2514, 2510, 1845,
     2473, 2471, 1848, 1830, 1831, 2441, 1831, 1855, 1845, 1847,
     1858, 1851, 1858, 1863, 1860, 1874, 1868,    0, 1865, 1865,
     1875, 1885, 1874, 1880, 1872, 1893, 2360, 1890, 1895, 1899,
     1884, 1889, 1917, 1919, 1924, 1891, 2341, 1909, 1913, 1924,
     1927, 1911, 1913,    0, 1916, 1931, 1931, 1926, 1923, 1918,
     1928, 1942, 1945, 1927, 1941, 1947, 1933, 2277, 1943, 1955,
     1976, 1980, 1949, 1940, 2257, 1942, 1958, 1955, 1951, 1977,

     1967, 2211, 1977, 1976, 1985, 1977, 1992, 2191, 1988, 1998,
     1983, 1996, 1983, 1988, 1985, 2006, 2174, 1986, 1991, 1994,
     2011, 1999, 2122, 2005,    0, 2013, 2005, 2011, 2010, 3153,
     2092, 2022, 2012, 2040, 2024, 2034, 2024, 2027, 2042, 2030,
     2038, 2052, 2038, 2038, 2063, 2041, 2041, 2056, 2049, 2050,
     2058, 2076, 2066, 2072, 2006, 2071, 1995, 2066, 2071, 2068,
     2070, 2081, 2070, 1954,    0, 2085, 2086, 2080, 2081, 2087,
     2097, 2084, 2099, 2098, 1942, 2105, 2110, 2111, 1934, 2116,
     2142, 2109, 2115, 1845, 2125, 2113, 2123, 2113, 2114, 2133,
     2146, 2117, 2120, 2128, 2130, 1808, 1798, 2135, 2163, 2142,

     1782, 2155, 2146, 2165, 2149, 1733, 2162, 2165, 2152, 2154,
     2178,    0, 2161, 2161, 3153, 2161, 2168, 2167, 2180, 2167,
     2173, 2177, 2173, 2183, 2185, 2189, 2201, 1595, 2183, 2196,
     2189, 2199, 2199, 1589, 1534, 2198, 2225, 2229, 1518, 1505,
     1497, 1466, 2232, 2237, 2206, 2215, 2231, 2216, 2217, 2250,
     2224,    0, 2240, 2250, 3153, 2238, 2256, 2253, 2241, 1404,
     2247, 2247, 2247, 2246, 2252, 2249, 3153, 2267, 2270, 2259,
     2275, 2263, 2265, 2261, 2263, 2286, 2269, 2295, 2283, 2299,
     2295, 2307, 2309, 2311, 2320, 2314, 2322, 2297, 2299, 2318,
     2310, 2309, 2311, 2331, 2334, 2322,    0, 2326, 2318, 2317,

     2342, 2345, 2324, 2337, 2338, 1394, 2332, 1367, 2349, 1363,
     2338, 2339, 2340, 2350, 2366, 2350, 2359, 2364, 2355, 2356,
     2361, 2378, 2368, 2371, 2388, 2402, 2405, 2390, 2412, 1319,
     2374, 2395, 2394, 2389, 3153, 2414, 1313, 2405, 2410, 2412,
     2419, 2398, 2419, 2410, 2403, 2408, 2428, 2411, 2426, 2412,
     2414, 2416, 2418, 2439, 2464, 1302, 2422, 2425, 2436, 2443,
     2435, 2472, 2481, 2445, 2453, 2474, 2486, 2488, 2491, 2493,
     2496, 2498, 3153, 1235, 2459, 2494, 2492, 2503, 2503, 2488,
     2490, 2499, 2492, 2507, 2503, 2499, 2517, 1228, 2499, 2511,
     2503, 1181, 2513, 2514, 2516, 2528, 2540, 2523, 1171, 2514,

     2526, 2535, 2552, 1158, 1151, 2554, 2556, 2561, 2563, 2532,
     2532, 2556, 2576, 2545, 3153, 3153, 2552, 3153, 2558, 2550,
     2550, 2578, 2581, 2563, 2577, 2567, 2580, 2572, 2583, 2585,
     2593, 2600, 2595, 2592, 2597, 2590, 1092, 2606, 2613, 2618,
     2600, 2606, 2600, 2623, 2631, 2619, 2618, 2611, 2625, 2630,
     2637, 2624, 2622, 2636, 2625, 2639, 2637, 2638, 2639, 2653,
     2678, 2643, 2643, 2642, 1077, 2649, 2688, 2691, 2654, 2655,
     2654, 2665, 2656, 3153, 2671,  973, 2665, 2675, 2693, 2678,
      915,  881, 2694, 2695, 2692, 2703, 2695, 2698,  819, 2711,
     2703, 2713, 2716, 2718, 2723, 2720, 2721, 2725, 3153, 2727,

     2716, 3153, 2716, 2717, 2729, 2726, 2739, 2725, 2726, 2719,
     2720, 2727, 2748, 2750, 2733, 2772, 2774,  784,  729, 2736,
     2737, 2748, 3153, 2755, 2761, 2773, 2760, 2762, 2764, 2782,
     2783,  700, 2787, 2770, 2791, 2793, 3153, 2793, 2794, 2782,
     2786, 2787, 2782,  636,  580, 2786, 2788, 2811,  567, 2814,
     2816, 2805, 2801, 2810, 2822,  511, 2811, 2833, 2835, 2821,
     2827, 2838, 2836,  500, 2824,  484,  474, 2825, 2831, 2846,
     2850, 2832, 2838, 2842, 2851,  465, 2858, 2860, 2854, 2861,
     2852, 2855, 2869, 2851, 2870, 2875, 2884, 2871, 2859,  337,
      257, 2862, 2880, 2872, 2892, 2907, 2879, 2878, 2900, 2909,

     2884, 2894, 2897, 2915, 2899, 2912, 2924, 2929, 2910, 2901,
     2912, 2907, 2914, 2934, 2939, 2946, 2952, 2935,  183, 2925,
      166, 3153, 2948, 2958, 2944, 2950, 2946, 2950, 2958, 2946,
     2947, 2964, 2954, 2967, 2968, 2961, 2958, 2960, 2962, 2973,
      161, 2980, 3153, 2964, 2989, 2968, 2983, 2974, 2988, 2993,
     3153,  133, 3003, 2994, 3005, 2998, 2999, 3000,  125, 3000,
     3015, 3023,  113,  111, 3025, 3031, 3007, 3040, 3012, 3027,
     3020,   77, 3047, 3049, 3153, 3067, 3069,   71,   67, 3071,
       63
    } ;

static yyconst flex_int16_t yy_def[1582] =
    {   0,
     1575,    1, 1575, 1575, 1575, 1575, 1576, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1576, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1577, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1577, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1578, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1578, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1579, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1579, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1580, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1580, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1581, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1581, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575,    0, 1575, 1575, 1575, 1575, 1575,
     1575
    } ;

static yyconst flex_int16_t yy_nxt[3212] =
    {   0,
        4,    5,    6,    5,    7,    4,    4,    4,    4,    8,
        9,   10,   11,   12,   13,    4,   14,   15,    4,   16,
        4,   17,   18,    4,   19,   20,   21,   22,   23,    4,
       24,    4,    4,    4,    8,    9,   10,   11,   12,   13,
        4,   14,   15,   16,    4,   17,   18,    4,   19,   20,
       21,   22,   23,    4,   24,    4,    4,    4,   25,   25,
       25,   25,   25,   25,   28, 1197,   30,   31,   35, 1025,
       39,   32,   29,  948,   33,   46,   34,   40,   36,   43,
     1573,   65,   41,  421,  421,   63,   44,   64,   37,   28,
       30,   45,   31,   38,   39,   32,   29,   42,   33,   46,

       34,   50,   40,   36,   43,   47,   65,   41,   48,   63,
       44,   64,   37,   49, 1567,   45, 1566,   38,   52,   66,
       68,   42,   53,   56,  523,  523,   51,   57, 1562,   67,
       47,   71,   54,   48,   55,   69, 1555,   58,   49,   25,
       25,   25,   59,   52,   66,   68,   60,   53,   56,   61,
       51,   70,   57,   67,   62,   71,   54,   72,   55,   73,
       69,   58,   74,   75, 1545,   76,   59,   77,   81, 1528,
       82,   60,   83,   78,   61,   86,   70,   88,   62,   89,
       79,   72,   84,   73,   80,   85, 1526,   74,   75,   76,
       90,   91,   77,   81,   82,   92,   83,   78,   93,   94,

       86,   88,   95,   89,   79,   98,   96,   84,   80,  101,
       85,   97,  102,  103,   90,   91,   99,  104,  100,   92,
      105,  108,   93,   94,  106,  107,   95,  109,  111,   98,
       96,  112,  113,  101,  114,   97,  102,  103,  115,  117,
       99,  104,  100,  116,  118,  105,  108,  120,  106,  107,
      121,  109,  122,  111,  123,  125,  112,  113,  114,  126,
     1500,  127,  128,  115,  117,  129,  130,  116,  135,  118,
      138,  120,  139,  141,  121,  142,  122,  144,  123,  125,
      131,  146,  136,  147,  126,  127,  128,  132,  133,  129,
      130,  134,  145,  148,  149,  138,  150,  139,  141,  151,

      142,  152,  144,  153,  154,  131,  146,  136,  147,  155,
      157,  159,  132,  133,  158,  134,  145,  148,  160,  149,
      161,  150,  162,  163,  151,  152,  164,  153,  166,  154,
      167,  169,  170,  155,  171,  157,  159,  172,  158,  173,
     1499,  174,  175,  160,  161,  176,  162,  163,  177,  178,
      164,  179,  166,  180,  167,  181,  169,  170,  182,  171,
      183,  198,  172,  185,  173,  174,  175,  189,  184,  176,
      194,  195,  186,  177,  178,  187,  179,  180,  191,  181,
      196,  199,  192,  182,  200,  183,  198,  185,  188,  201,
      202,  189,  184,  193,  194,  195,  204,  186,  206,  207,

      187,  208,  212,  191,  196,  199,  209,  192,  200,  213,
      215,  210,  188,  201,  202,  219,  211,  193,  218,  220,
      222,  204,  206,  207,  221,  208,  212,  226,  227,  228,
      229,  209,  223,  213,  215,  210,  224,  232,  225,  219,
      211,  230,  231,  218,  220,  222,  233,  234,  221,  235,
      236,  226,  227,  228,  229,  237,  238,  223,  239,  240,
      241,  224,  232,  225,  242,  230,  231,  243, 1485,  244,
      233,  246,  234,  235,  245,  236,  247, 1478,  248,  237,
      238,  249,  239,  240,  241,  250,  251, 1477,  252,  242,
      253,  254,  243,  244,  263,  264,  246,  265,  245,  266,

      267,  247,  248, 1475,  270,  249,  275,  529,  529,  250,
      271,  251,  252,  274, 1468,  253,  254,  255,  263,  264,
      276,  256,  265,  257,  266,  267,  278,  258,  270,  259,
      275,  260,  261,  268,  277,  271,  279,  269,  274,  262,
      280,  281,  255,  282,  283,  276,  256,  284,  257,  285,
      278,  258,  286,  259,  287,  260,  261,  288,  268,  277,
      279,  289,  269,  262,  280,  291,  281,  282,  283,  292,
     1463,  293,  284,  285,  295,  296,  286,  290,  287,  297,
      298,  288,  300, 1459,  301,  302,  289,  303,  309,  291,
      304,  305,  306,  307,  292,  293,  308,  310,  295,  296,

      311,  290,  312,  313,  297,  298,  314,  300,  301,  315,
      302,  316,  303,  309,  304,  305,  306,  307,  318,  319,
      308,  320,  310,  321,  323,  311,  312,  322,  313,  324,
      314,  325,  326,  315,  329,  316,  332,  327,  330, 1458,
      328,  333,  318,  319,  335,  320,  336,  337,  321,  323,
      338,  322,  339,  324,  340,  341,  325,  326,  342,  329,
      332,  327,  343,  330,  328,  344,  333,  345,  335,  346,
      347,  336,  337,  348,  338,  349,  350,  339,  340,  341,
      351,  352,  364,  342,  355,  356,  343,  357,  358,  344,
      359,  361,  345,  363,  346,  347,  365,  367,  348,  366,

      349,  350,  368, 1448,  369,  351,  352,  364,  355,  356,
      370,  357,  358,  371,  359,  361,  372,  363,  373,  375,
      378,  365,  367,  366,  376,  377,  380,  368,  369,  381,
      382,  383, 1436,  384,  370,  385,  386,  389,  371,  387,
      388,  372,  390,  373,  375,  378,  391,  392,  376,  377,
      380,  393,  394,  381,  382,  397,  383,  384,  395,  400,
      385,  386,  389,  387,  388,  396,  390,  399,  401,  402,
      403,  391,  392,  404,  405,  406,  393,  394,  407,  397,
      408,  409,  410,  395,  400,  411,  412, 1435,  413,  396,
      414,  399,  401,  417,  402,  403,  418,  404,  405,  406,

      420,  422,  407,  423,  424,  408,  409,  410,  425,  411,
      426,  412,  413,  427,  414,  428,  430,  417,  431,  432,
      418,  433, 1413,  434,  420,  429,  422,  435,  423,  424,
      437,  438,  425,  439,  426,  440,  441,  427,  442,  428,
      430,  443,  444,  431,  432,  445,  433,  434,  446,  429,
      447,  448,  435,  450,  437,  438,  451,  439,  452,  440,
      441,  453,  442,  456,  457,  458,  443,  444,  459,  464,
      445,  461,  462,  446,  463,  447,  448,  465,  450,  466,
      467,  451,  452,  470, 1407,  471,  453,  456,  468,  457,
      458,  473,  469,  459,  464,  461,  462,  472,  463,  474,

      475,  478,  465,  466,  476,  467,  477,  479,  470,  471,
      480,  481,  483,  468,  484,  473,  469,  486, 1406,  487,
      488,  489,  472,  496,  474,  475,  478,  499,  476,  497,
      477,  479,  498,  490,  480,  481,  483,  500,  501,  484,
      491,  502,  486,  487,  503,  488,  489,  496,  492,  494,
      495,  495,  499,  497,  504,  507,  498,  505,  490,  506,
      508,  500,  501,  509,  510,  491,  502,  511,  513,  503,
      512,  514,  492,  515,  517,  519, 1401,  520,  521,  504,
      507,  505,  522,  506,  524,  508,  525,  509,  526,  510,
      527,  528,  511,  513,  512,  530,  514,  515,  517,  531,

      519,  520,  521,  532,  533,  535,  522,  534,  534,  524,
      525,  536,  526,  537,  527,  538,  528,  539,  541,  530,
      542,  543,  545,  531,  546,  544,  547,  532,  548,  533,
      535,  549,  550,  552,  553,  536,  554,  537,  555,  556,
      538,  539,  541,  557,  542,  560,  543,  545,  546,  561,
      544,  547,  548,  562,  563,  549,  550,  552,  553,  565,
      566,  554,  555,  567,  556,  568,  570,  557,  571,  560,
      569,  569,  572,  561,  494,  495,  495,  562,  563,  573,
     1390,  574,  575,  565,  566,  576,  577,  578,  567,  568,
      579,  570,  580,  571,  581, 1366,  582,  572,  583,  584,

      585,  587,  588,  589,  573,  574,  575,  590,  590,  576,
      577,  578,  591,  592,  579,  593,  580,  594,  602,  581,
      582,  596,  583,  584,  585,  599,  587,  588,  589,  597,
      598,  598,  600,  601,  603,  606,  591,  592,  607,  593,
      608,  615,  594,  602,  612,  596,  604,  605,  605,  599,
      610,  611,  611,  617, 1339,  618,  600,  601,  603,  606,
      619, 1338,  620,  607,  621,  608,  615,  622,  612,  623,
      625,  626,  627,  628, 1334,  629,  632,  633,  617,  618,
      634,  635,  643,  636, 1328,  619,  620,  637,  621,  638,
      639,  640,  622,  623,  644,  625,  626,  627,  628,  629,

      632,  641,  633,  645,  634,  646,  635,  643,  636,  642,
      651,  637,  647,  638,  639,  640,  569,  569,  648,  644,
      649,  650,  652,  653,  654,  656,  641,  645,  655,  646,
      657, 1324,  658,  659,  642,  651,  647,  660, 1309,  661,
      662,  667,  648,  664,  649,  650,  652,  653,  666,  654,
      656,  668,  655,  663,  663,  657,  658,  670,  659,  590,
      590,  671,  660,  661,  672,  662,  667,  664,  673,  673,
      674,  675,  666,  597,  598,  598,  668,  677,  678,  679,
      679,  670,  604,  605,  605,  671,  680,  681,  682,  672,
      683,  683,  684,  684,  674,  685,  675,  610,  611,  611,

      686,  686,  677,  678,  687, 1297,  688,  689,  689,  690,
      680,  681,  691,  682,  692,  693, 1278,  697,  698,  699,
      685,  700,  701,  702,  702,  703,  705, 1273,  706,  687,
      688,  707,  708,  690,  709,  712,  691,  711,  692,  713,
      693,  697,  698,  699,  714,  700,  701,  715,  717,  703,
      716,  705,  706,  718,  721,  707,  708,  719,  720,  709,
      712,  711,  722,  723,  713,  724, 1249,  728,  714,  729,
     1247,  731,  715,  717,  716,  732,  733,  734,  718,  721,
      735,  719,  720,  663,  663,  736,  722,  723,  737,  738,
      724,  728,  739,  740,  729,  731,  741, 1245,  742,  732,

      733,  734,  673,  673,  735,  743,  744, 1205,  745,  736,
      746,  747,  737,  748,  738,  749,  739,  740,  679,  679,
      750,  741,  742,  751,  752,  752,  684,  684,  753,  757,
      743,  744,  745,  756,  746,  760,  747,  762,  748,  763,
      749,  754,  755,  755,  750,  758,  759,  759,  764,  765,
      765,  766,  767,  753,  757,  768,  769,  756,  770,  771,
      760,  772,  762,  763,  702,  702,  773,  774,  775, 1184,
      776,  777,  782,  764,  778,  766,  767,  779,  779,  768,
      780,  769,  781,  770,  771,  783,  772,  784,  786,  787,
      773,  774,  789,  775,  776,  790,  777,  782,  778,  791,

     1183,  792,  794,  796,  780,  795,  781,  797, 1182,  799,
      783,  784,  786,  787,  800,  801,  789,  802,  803,  790,
      804, 1181,  806,  807,  791,  792,  808,  794,  796,  795,
      810,  811,  797,  799,  812,  814,  815, 1178,  816,  800,
      801,  802,  803,  817,  818,  804,  806,  819,  807,  821,
      808,  820,  820,  823,  810,  811,  822,  822,  812,  814,
      824,  815,  816,  751,  752,  752,  826,  817,  818,  754,
      755,  755,  819,  821,  825,  825,  829,  823,  758,  759,
      759,  827,  830,  832,  824,  828,  831,  765,  765,  833,
      826,  834, 1177,  836,  837,  838,  839,  841, 1171,  843,

      829,  844,  845,  846,  846,  827,  847,  830,  832,  828,
      831,  848,  853,  833,  849,  850,  834,  836,  837,  838,
      856,  839,  841,  843,  859,  844,  851,  851,  860,  861,
      847,  862,  863,  864,  865,  872,  848,  853,  849,  850,
      868,  870,  871,  871,  856,  873,  875,  875,  859,  876,
      877,  879,  860,  861,  880,  862,  863,  881,  864,  865,
      872,  882,  884,  886,  868,  870,  885,  820,  820,  887,
      873,  822,  822,  888,  876,  877,  879,  825,  825,  880,
      889,  881,  890,  891,  892,  894,  882,  884,  886,  896,
      885,  897,  899,  887,  898,  900,  901,  902,  888,  903,

      904,  905,  905,  908,  908,  889,  909,  890,  891,  892,
      894,  845,  846,  846,  896,  913,  897,  899,  898,  900,
      914,  901,  902,  903,  915,  904,  910,  911,  911,  916,
      909,  912,  912,  917,  918,  919, 1152,  920,  921,  913,
      922,  923,  924,  925,  926,  914,  927,  928,  915,  871,
      871,  929,  930,  916,  875,  875,  931,  932,  917,  918,
      919,  920,  921,  934,  922,  923,  924,  925,  926,  935,
      927,  928,  933,  933,  936,  929,  930,  937,  938,  938,
      931,  932,  941,  942,  945, 1147,  946,  934,  947,  949,
      950,  951,  952,  935,  953,  954,  955,  959,  936,  957,

      958, 1144,  937,  905,  905,  961,  941,  942,  962,  945,
      946, 1143,  947,  949,  950,  951,  952,  966,  953,  954,
      967,  955,  959,  957,  958,  960,  960,  908,  908,  968,
      961,  963,  963,  962,  910,  911,  911,  964,  965,  965,
      969,  966,  971,  972,  967,  973,  975,  976, 1130,  977,
      978,  979,  980,  968,  984,  933,  933,  987,  988,  990,
      981,  991,  992,  992,  969,  993,  971,  972,  994,  973,
      975,  995,  976,  977,  996,  978,  979,  980,  997,  984,
      998,  987,  988,  990,  999,  981, 1000, 1001, 1005,  993,
     1002, 1003,  994, 1004, 1006, 1008,  995, 1007,  996, 1009,

     1010, 1010,  997, 1012, 1013,  998,  960,  960,  999, 1014,
     1000, 1015, 1001, 1005, 1002, 1003, 1017, 1004, 1019, 1006,
     1008, 1007, 1020, 1009,  963,  963, 1016, 1016, 1012, 1013,
      964,  965,  965, 1014, 1021, 1015, 1022, 1126, 1023, 1024,
     1017, 1026, 1027, 1019, 1028, 1122, 1029, 1020, 1030, 1031,
     1032, 1033, 1034, 1034, 1035, 1036, 1037, 1111, 1038, 1021,
     1040, 1022, 1023, 1024, 1041, 1026, 1043, 1027, 1044, 1028,
     1029, 1046, 1030, 1031, 1032, 1047, 1033, 1048, 1035, 1049,
     1036, 1037, 1038, 1042, 1042, 1040,  991,  992,  992, 1041,
     1050, 1043, 1044, 1051, 1053, 1046, 1054, 1055, 1104, 1056,

     1047, 1048, 1057, 1049, 1059, 1010, 1010, 1060, 1061, 1102,
     1062, 1063, 1064, 1016, 1016, 1050, 1066, 1051, 1067, 1053,
     1054, 1068, 1055, 1056, 1069, 1078, 1070, 1057, 1072, 1059,
     1073, 1060, 1074, 1061, 1062, 1063, 1064, 1075, 1076, 1079,
     1066, 1082, 1067, 1083, 1085, 1068, 1080, 1081, 1081, 1069,
     1070, 1084, 1072, 1086, 1093, 1073, 1074, 1087, 1088, 1042,
     1042, 1075, 1076, 1079, 1089, 1090, 1082, 1094, 1083, 1085,
     1091, 1091, 1092, 1095, 1098, 1084, 1096, 1097, 1086, 1093,
     1100, 1087, 1088, 1099, 1099, 1101, 1103, 1108, 1089, 1090,
     1105, 1094, 1106, 1107, 1109, 1077, 1110, 1092, 1095, 1098,

     1096, 1097, 1113, 1114, 1117, 1100, 1115, 1116, 1118, 1120,
     1101, 1103, 1108, 1119, 1105, 1121, 1106, 1107, 1123, 1109,
     1110, 1124, 1125, 1127, 1127, 1071, 1129, 1113, 1114, 1117,
     1115, 1116, 1128, 1118, 1120, 1131, 1133, 1119, 1132, 1134,
     1121, 1135, 1136, 1123, 1139, 1140, 1124, 1125, 1080, 1081,
     1081, 1129, 1137, 1138, 1138, 1141, 1128, 1142, 1145, 1146,
     1131, 1133, 1132, 1134, 1148, 1135, 1149, 1136, 1139, 1140,
     1099, 1099, 1150, 1150, 1151, 1153, 1154, 1065, 1155, 1141,
     1156, 1142, 1145, 1158, 1146, 1157, 1157, 1159, 1160, 1148,
     1149, 1161, 1162, 1163, 1058, 1164, 1165, 1166, 1151, 1167,

     1153, 1154, 1155, 1168, 1156, 1169, 1170, 1158, 1127, 1127,
     1172, 1159, 1160, 1173, 1052, 1161, 1162, 1174, 1163, 1164,
     1165, 1166, 1175, 1167, 1176, 1179, 1188, 1168, 1189, 1169,
     1193, 1170, 1180, 1180, 1172, 1137, 1138, 1138, 1173, 1185,
     1185, 1174, 1186, 1192, 1187, 1187, 1175, 1196, 1176, 1179,
     1188, 1190, 1198, 1189, 1191, 1193, 1194, 1195, 1195, 1199,
     1045, 1200, 1201, 1202, 1202, 1203, 1211, 1192, 1204, 1206,
     1207, 1196, 1208, 1209, 1210, 1190, 1212, 1198, 1191, 1213,
     1039, 1214, 1215, 1215, 1199, 1200, 1216, 1217, 1218, 1219,
     1203, 1211, 1204, 1206, 1207, 1220, 1208, 1209, 1210, 1221,

     1223, 1212, 1222, 1222, 1213, 1214, 1180, 1180, 1224, 1230,
     1216, 1217, 1218, 1219, 1225, 1225, 1226, 1226, 1227, 1227,
     1220, 1187, 1187, 1221, 1231, 1223, 1228, 1229, 1229, 1187,
     1187, 1232, 1237, 1224, 1230, 1233, 1234, 1235, 1236, 1236,
     1194, 1195, 1195, 1238, 1018, 1239, 1240, 1242, 1231, 1241,
     1241, 1201, 1202, 1202, 1243, 1244, 1232, 1237, 1246, 1233,
     1234, 1235, 1248, 1011, 1250, 1251, 1252, 1253, 1238, 1239,
     1240, 1242, 1254, 1255, 1255, 1256, 1257, 1258, 1261, 1243,
     1244, 1259, 1246, 1260, 1262, 1263, 1263, 1248, 1250, 1251,
     1252, 1264, 1253, 1265, 1266, 1267, 1267, 1272, 1272, 1256,

     1274, 1257, 1258, 1261, 1275, 1259, 1276, 1260, 1268, 1269,
     1269, 1270, 1271, 1271, 1277, 1264, 1279, 1265, 1228, 1229,
     1229, 1236, 1236, 1280, 1274, 1281, 1241, 1241, 1282, 1275,
     1283, 1276, 1284, 1285, 1286, 1287, 1287, 1288, 1277, 1292,
     1293, 1279, 1294, 1289,  989, 1295, 1296, 1296, 1280, 1298,
     1281, 1299, 1282, 1290, 1291, 1283, 1284, 1285, 1286, 1300,
     1301, 1288, 1302, 1292, 1293, 1305, 1294, 1304, 1289, 1295,
     1254, 1255, 1255, 1298,  986, 1299,  985, 1290, 1291, 1303,
     1303, 1306, 1306, 1300, 1310, 1301, 1302, 1262, 1263, 1263,
     1305, 1304, 1266, 1267, 1267, 1307, 1307, 1268, 1269, 1269,

     1308, 1308, 1270, 1271, 1271, 1272, 1272, 1311, 1310, 1312,
     1313, 1313, 1314,  983, 1315, 1316, 1317,  982, 1318, 1319,
     1320,  974, 1321, 1322, 1323, 1323, 1325, 1326,  970, 1327,
     1329, 1330, 1311, 1331, 1312, 1296, 1296, 1314, 1315, 1316,
     1333, 1317, 1318, 1335, 1319, 1320, 1321, 1332, 1332, 1336,
     1325, 1337, 1326, 1327, 1341, 1329, 1330, 1342, 1331, 1303,
     1303, 1306, 1306, 1307, 1307, 1333, 1343, 1335, 1308, 1308,
     1340, 1340, 1346, 1336, 1347, 1348, 1337, 1349, 1341, 1350,
     1352, 1342, 1344, 1345, 1345, 1351, 1351, 1322, 1323, 1323,
     1353, 1343, 1354, 1355,  956, 1356, 1346, 1357, 1347, 1358,

     1348, 1349, 1359, 1350, 1362, 1352, 1360, 1361, 1361, 1363,
     1364,  944, 1365, 1367, 1367, 1353, 1354, 1369, 1355, 1356,
     1368, 1368, 1357, 1370, 1358, 1340, 1340, 1359, 1371, 1362,
     1372, 1372, 1373, 1374, 1363, 1364, 1365, 1344, 1345, 1345,
     1375, 1376, 1369, 1377, 1351, 1351, 1378, 1379, 1370, 1380,
      943, 1381, 1371, 1382, 1383, 1384,  940, 1373, 1374, 1385,
     1386, 1386,  939, 1387, 1375, 1388, 1376, 1389, 1377, 1391,
     1378, 1379, 1372, 1372, 1380, 1381, 1396, 1397, 1382, 1383,
     1384, 1398, 1399, 1385, 1360, 1361, 1361, 1387, 1400, 1388,
     1402, 1389, 1403, 1391, 1392, 1393, 1393, 1394, 1395, 1395,

     1396, 1397, 1404,  907, 1405, 1398, 1399, 1408, 1409, 1410,
     1386, 1386, 1411, 1400, 1402, 1412, 1415, 1403, 1414, 1414,
     1416, 1416, 1392, 1393, 1393, 1417, 1417, 1404, 1405, 1394,
     1395, 1395, 1408, 1409, 1410, 1418, 1419, 1411, 1420, 1421,
     1412, 1415, 1422, 1423, 1424, 1425,  906, 1426, 1427,  895,
     1428, 1429, 1430, 1431, 1432, 1433, 1433, 1414, 1414, 1434,
     1418, 1419, 1437, 1420, 1421, 1438, 1422, 1423, 1424, 1439,
     1425, 1426, 1440, 1427, 1428, 1429, 1430, 1431, 1432, 1416,
     1416, 1417, 1417, 1434, 1441, 1442, 1437, 1443, 1444, 1438,
     1445, 1446, 1447, 1439, 1433, 1433, 1449, 1440, 1450, 1450,

     1451, 1451, 1452, 1453,  893, 1454, 1455, 1456, 1441, 1457,
     1442, 1443, 1444, 1460, 1445, 1461, 1446, 1447, 1462, 1462,
     1449, 1450, 1450, 1451, 1451, 1464, 1465, 1452, 1453, 1454,
     1455, 1456, 1466, 1457, 1467,  883, 1469, 1460, 1472, 1461,
     1470, 1470, 1471, 1471, 1473, 1462, 1462, 1474, 1480, 1464,
     1465, 1476, 1479, 1470, 1470, 1481, 1466, 1471, 1471, 1467,
     1469, 1482, 1483, 1472, 1484, 1486, 1486, 1487, 1487, 1473,
     1488, 1489, 1474, 1480, 1490, 1476, 1479, 1491, 1492, 1481,
     1493, 1494, 1486, 1486, 1497, 1482, 1483, 1498, 1501, 1484,
     1495, 1496, 1496, 1502,  878, 1488, 1489, 1503, 1490, 1504,

     1504, 1491, 1505, 1492, 1493, 1506, 1494, 1507, 1507, 1497,
     1509, 1498, 1501, 1495, 1496, 1496, 1508, 1508, 1502, 1510,
     1511, 1503, 1504, 1504, 1512, 1513, 1505, 1518,  874, 1506,
     1514, 1515, 1515, 1519, 1509, 1516, 1517, 1517, 1520, 1521,
     1522, 1523, 1523, 1510, 1511, 1514, 1515, 1515, 1512, 1525,
     1513, 1527, 1518, 1524, 1524, 1523, 1523, 1519, 1516, 1517,
     1517, 1529, 1520, 1521, 1522, 1524, 1524, 1530,  869, 1531,
     1532, 1533,  867, 1534, 1525, 1527, 1535, 1536,  866, 1537,
     1538, 1539,  858, 1540, 1541, 1542, 1529, 1543, 1544, 1546,
      857, 1547, 1530, 1531, 1532, 1550, 1533, 1534, 1548, 1551,

     1535, 1552, 1536, 1537, 1553, 1538, 1539, 1540, 1541, 1542,
     1554, 1543, 1556, 1544, 1546, 1547, 1549, 1557, 1558, 1550,
     1559, 1560, 1561, 1548, 1551, 1552, 1563, 1564, 1570, 1553,
     1565, 1565, 1565, 1565, 1569, 1554, 1571, 1556, 1568, 1568,
     1549, 1557, 1572, 1558, 1559, 1560, 1561, 1568, 1568,  855,
     1563,  852, 1564, 1570, 1574, 1574, 1574, 1574, 1569,  842,
      840, 1571,  835,  813,  809,  805, 1572,   26,   26,   26,
      854,  854, 1112, 1112,  798,  793,  788,  785,  761,  730,
      727,  726,  725,  710,  704,  696,  695,  694,  676,  669,
      665,  631,  630,  624,  616,  614,  613,  609,  595,  586,

      564,  559,  558,  551,  540,  518,  516,  493,  485,  482,
      460,  455,  454,  449,  436,  419,  416,  415,  398,  379,
      374,  362,  360,  354,  353,  334,  331,  317,  299,  294,
      273,  272,  217,  216,  214,  205,  203,  197,  190,  168,
      165,  156,  143,  140,  137,  124,  119,  110,   87,   27,
       27, 1575,    3, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575
    } ;

static yyconst flex_int16_t yy_chk[3212] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    6,    6,    6,    8, 1581,    9,   10,   11, 1579,
       12,   10,    8, 1578,   10,   16,   10,   13,   11,   15,
     1572,   24,   14,  353,  353,   22,   15,   23,   11,    8,
        9,   15,   10,   11,   12,   10,    8,   14,   10,   16,

       10,   18,   13,   11,   15,   17,   24,   14,   17,   22,
       15,   23,   11,   17, 1564,   15, 1563,   11,   19,   28,
       30,   14,   19,   20,  449,  449,   18,   20, 1559,   29,
       17,   33,   19,   17,   19,   31, 1552,   20,   17,   25,
       25,   25,   20,   19,   28,   30,   21,   19,   20,   21,
       18,   32,   20,   29,   21,   33,   19,   34,   19,   35,
       31,   20,   36,   37, 1541,   38,   20,   39,   41, 1521,
       42,   21,   43,   40,   21,   45,   32,   47,   21,   48,
       40,   34,   44,   35,   40,   44, 1519,   36,   37,   38,
       49,   50,   39,   41,   42,   51,   43,   40,   52,   53,

       45,   47,   54,   48,   40,   56,   55,   44,   40,   58,
       44,   55,   59,   60,   49,   50,   57,   61,   57,   51,
       62,   64,   52,   53,   63,   63,   54,   65,   67,   56,
       55,   68,   69,   58,   70,   55,   59,   60,   71,   73,
       57,   61,   57,   72,   74,   62,   64,   76,   63,   63,
       77,   65,   78,   67,   79,   81,   68,   69,   70,   82,
     1491,   83,   84,   71,   73,   85,   86,   72,   88,   74,
       90,   76,   91,   93,   77,   94,   78,   96,   79,   81,
       87,   98,   88,   99,   82,   83,   84,   87,   87,   85,
       86,   87,   97,  100,  101,   90,  102,   91,   93,  103,

       94,  104,   96,  105,  106,   87,   98,   88,   99,  107,
      109,  111,   87,   87,  110,   87,   97,  100,  112,  101,
      113,  102,  114,  115,  103,  104,  116,  105,  118,  106,
      119,  121,  122,  107,  123,  109,  111,  124,  110,  125,
     1490,  126,  127,  112,  113,  128,  114,  115,  129,  130,
      116,  131,  118,  132,  119,  133,  121,  122,  134,  123,
      135,  145,  124,  136,  125,  126,  127,  138,  135,  128,
      141,  142,  137,  129,  130,  137,  131,  132,  140,  133,
      143,  146,  140,  134,  147,  135,  145,  136,  137,  148,
      149,  138,  135,  140,  141,  142,  151,  137,  153,  154,

      137,  155,  157,  140,  143,  146,  156,  140,  147,  158,
      160,  156,  137,  148,  149,  164,  156,  140,  163,  165,
      167,  151,  153,  154,  166,  155,  157,  169,  170,  171,
      172,  156,  168,  158,  160,  156,  168,  175,  168,  164,
      156,  173,  174,  163,  165,  167,  176,  177,  166,  178,
      179,  169,  170,  171,  172,  180,  181,  168,  182,  183,
      184,  168,  175,  168,  185,  173,  174,  186, 1476,  187,
      176,  188,  177,  178,  187,  179,  189, 1467,  190,  180,
      181,  191,  182,  183,  184,  192,  193, 1466,  194,  185,
      195,  196,  186,  187,  198,  199,  188,  200,  187,  201,

      202,  189,  190, 1464,  204,  191,  209,  455,  455,  192,
      205,  193,  194,  208, 1456,  195,  196,  197,  198,  199,
      210,  197,  200,  197,  201,  202,  212,  197,  204,  197,
      209,  197,  197,  203,  211,  205,  213,  203,  208,  197,
      214,  215,  197,  216,  217,  210,  197,  218,  197,  219,
      212,  197,  220,  197,  221,  197,  197,  222,  203,  211,
      213,  223,  203,  197,  214,  224,  215,  216,  217,  225,
     1449,  226,  218,  219,  228,  229,  220,  223,  221,  230,
      231,  222,  233, 1445,  234,  235,  223,  237,  244,  224,
      238,  240,  241,  242,  225,  226,  243,  245,  228,  229,

      246,  223,  247,  248,  230,  231,  249,  233,  234,  250,
      235,  251,  237,  244,  238,  240,  241,  242,  253,  254,
      243,  255,  245,  256,  258,  246,  247,  257,  248,  259,
      249,  260,  261,  250,  262,  251,  265,  261,  263, 1444,
      261,  266,  253,  254,  268,  255,  269,  270,  256,  258,
      271,  257,  272,  259,  273,  274,  260,  261,  275,  262,
      265,  261,  276,  263,  261,  277,  266,  278,  268,  279,
      280,  269,  270,  281,  271,  282,  283,  272,  273,  274,
      284,  285,  297,  275,  288,  289,  276,  290,  291,  277,
      292,  294,  278,  296,  279,  280,  298,  300,  281,  299,

      282,  283,  301, 1432,  302,  284,  285,  297,  288,  289,
      303,  290,  291,  304,  292,  294,  305,  296,  306,  308,
      311,  298,  300,  299,  309,  310,  313,  301,  302,  314,
      315,  316, 1419,  317,  303,  318,  319,  322,  304,  320,
      321,  305,  323,  306,  308,  311,  324,  325,  309,  310,
      313,  326,  327,  314,  315,  329,  316,  317,  328,  332,
      318,  319,  322,  320,  321,  328,  323,  331,  333,  334,
      335,  324,  325,  336,  337,  338,  326,  327,  339,  329,
      340,  341,  342,  328,  332,  343,  344, 1418,  345,  328,
      346,  331,  333,  349,  334,  335,  350,  336,  337,  338,

      352,  354,  339,  355,  356,  340,  341,  342,  357,  343,
      358,  344,  345,  359,  346,  360,  361,  349,  362,  363,
      350,  364, 1389,  365,  352,  360,  354,  366,  355,  356,
      368,  369,  357,  370,  358,  371,  372,  359,  373,  360,
      361,  374,  375,  362,  363,  376,  364,  365,  377,  360,
      378,  379,  366,  381,  368,  369,  382,  370,  383,  371,
      372,  384,  373,  387,  388,  389,  374,  375,  390,  395,
      376,  392,  393,  377,  394,  378,  379,  396,  381,  397,
      398,  382,  383,  399, 1382,  400,  384,  387,  398,  388,
      389,  402,  398,  390,  395,  392,  393,  401,  394,  403,

      404,  407,  396,  397,  405,  398,  406,  408,  399,  400,
      409,  410,  412,  398,  413,  402,  398,  415, 1381,  416,
      417,  418,  401,  422,  403,  404,  407,  425,  405,  423,
      406,  408,  424,  419,  409,  410,  412,  426,  427,  413,
      419,  428,  415,  416,  429,  417,  418,  422,  419,  421,
      421,  421,  425,  423,  430,  433,  424,  431,  419,  432,
      434,  426,  427,  435,  436,  419,  428,  437,  439,  429,
      438,  440,  419,  441,  443,  445, 1376,  446,  447,  430,
      433,  431,  448,  432,  450,  434,  451,  435,  452,  436,
      453,  454,  437,  439,  438,  456,  440,  441,  443,  457,

      445,  446,  447,  458,  459,  461,  448,  460,  460,  450,
      451,  462,  452,  463,  453,  464,  454,  465,  467,  456,
      468,  469,  470,  457,  471,  469,  472,  458,  473,  459,
      461,  474,  475,  477,  478,  462,  479,  463,  480,  481,
      464,  465,  467,  482,  468,  485,  469,  470,  471,  486,
      469,  472,  473,  487,  488,  474,  475,  477,  478,  490,
      491,  479,  480,  492,  481,  493,  496,  482,  497,  485,
      494,  494,  498,  486,  495,  495,  495,  487,  488,  499,
     1365,  500,  501,  490,  491,  502,  503,  504,  492,  493,
      505,  496,  506,  497,  507, 1337,  508,  498,  509,  510,

      511,  513,  514,  515,  499,  500,  501,  516,  516,  502,
      503,  504,  517,  518,  505,  519,  506,  520,  527,  507,
      508,  522,  509,  510,  511,  524,  513,  514,  515,  523,
      523,  523,  525,  526,  528,  530,  517,  518,  531,  519,
      532,  538,  520,  527,  535,  522,  529,  529,  529,  524,
      534,  534,  534,  540, 1305,  541,  525,  526,  528,  530,
      542, 1304,  543,  531,  544,  532,  538,  545,  535,  546,
      548,  549,  550,  551, 1299,  552,  556,  557,  540,  541,
      558,  559,  565,  559, 1292,  542,  543,  560,  544,  561,
      562,  563,  545,  546,  566,  548,  549,  550,  551,  552,

      556,  564,  557,  567,  558,  568,  559,  565,  559,  564,
      574,  560,  570,  561,  562,  563,  569,  569,  571,  566,
      572,  573,  575,  576,  577,  579,  564,  567,  578,  568,
      580, 1288,  581,  582,  564,  574,  570,  583, 1274,  584,
      585,  591,  571,  587,  572,  573,  575,  576,  589,  577,
      579,  592,  578,  586,  586,  580,  581,  594,  582,  590,
      590,  595,  583,  584,  596,  585,  591,  587,  597,  597,
      599,  600,  589,  598,  598,  598,  592,  602,  603,  604,
      604,  594,  605,  605,  605,  595,  606,  607,  608,  596,
      609,  609,  610,  610,  599,  612,  600,  611,  611,  611,

      613,  613,  602,  603,  614, 1256,  615,  616,  616,  617,
      606,  607,  618,  608,  619,  620, 1237,  624,  625,  626,
      612,  627,  628,  630,  630,  631,  633, 1230,  634,  614,
      615,  635,  636,  617,  637,  640,  618,  639,  619,  641,
      620,  624,  625,  626,  642,  627,  628,  643,  645,  631,
      644,  633,  634,  646,  649,  635,  636,  647,  648,  637,
      640,  639,  650,  651,  641,  652, 1210,  656,  642,  657,
     1208,  659,  643,  645,  644,  660,  661,  662,  646,  649,
      665,  647,  648,  663,  663,  666,  650,  651,  667,  668,
      652,  656,  669,  670,  657,  659,  671, 1206,  672,  660,

      661,  662,  673,  673,  665,  674,  675, 1160,  676,  666,
      677,  678,  667,  680,  668,  681,  669,  670,  679,  679,
      682,  671,  672,  683,  683,  683,  684,  684,  685,  688,
      674,  675,  676,  687,  677,  690,  678,  692,  680,  693,
      681,  686,  686,  686,  682,  689,  689,  689,  694,  695,
      695,  696,  697,  685,  688,  698,  699,  687,  700,  701,
      690,  703,  692,  693,  702,  702,  704,  705,  706, 1142,
      707,  708,  713,  694,  709,  696,  697,  710,  710,  698,
      711,  699,  712,  700,  701,  714,  703,  715,  717,  718,
      704,  705,  720,  706,  707,  721,  708,  713,  709,  722,

     1141,  723,  725,  727,  711,  726,  712,  728, 1140,  730,
      714,  715,  717,  718,  731,  732,  720,  733,  734,  721,
      735, 1139,  737,  738,  722,  723,  739,  725,  727,  726,
      741,  742,  728,  730,  743,  745,  746, 1135,  747,  731,
      732,  733,  734,  748,  749,  735,  737,  750,  738,  753,
      739,  751,  751,  756,  741,  742,  754,  754,  743,  745,
      757,  746,  747,  752,  752,  752,  760,  748,  749,  755,
      755,  755,  750,  753,  758,  758,  762,  756,  759,  759,
      759,  761,  763,  766,  757,  761,  764,  765,  765,  767,
      760,  768, 1134,  770,  771,  772,  773,  775, 1128,  777,

      762,  778,  779,  779,  779,  761,  780,  763,  766,  761,
      764,  781,  787,  767,  783,  784,  768,  770,  771,  772,
      790,  773,  775,  777,  793,  778,  785,  785,  794,  795,
      780,  796,  797,  798,  799,  806,  781,  787,  783,  784,
      802,  804,  805,  805,  790,  807,  809,  809,  793,  810,
      811,  813,  794,  795,  814,  796,  797,  815,  798,  799,
      806,  816,  818,  821,  802,  804,  819,  820,  820,  823,
      807,  822,  822,  824,  810,  811,  813,  825,  825,  814,
      826,  815,  827,  828,  829,  831,  816,  818,  821,  833,
      819,  834,  836,  823,  835,  837,  838,  839,  824,  840,

      841,  842,  842,  845,  845,  826,  850,  827,  828,  829,
      831,  846,  846,  846,  833,  853,  834,  836,  835,  837,
      855,  838,  839,  840,  857,  841,  851,  851,  851,  858,
      850,  852,  852,  859,  860,  861, 1106,  862,  863,  853,
      864,  865,  866,  867,  868,  855,  869,  872,  857,  871,
      871,  873,  874,  858,  875,  875,  876,  877,  859,  860,
      861,  862,  863,  879,  864,  865,  866,  867,  868,  880,
      869,  872,  878,  878,  881,  873,  874,  882,  883,  883,
      876,  877,  886,  887,  890, 1101,  891,  879,  892,  894,
      895,  896,  897,  880,  898,  899,  900,  904,  881,  902,

      903, 1097,  882,  905,  905,  907,  886,  887,  909,  890,
      891, 1096,  892,  894,  895,  896,  897,  913,  898,  899,
      914,  900,  904,  902,  903,  906,  906,  908,  908,  915,
      907,  910,  910,  909,  911,  911,  911,  912,  912,  912,
      916,  913,  918,  919,  914,  920,  922,  923, 1084,  924,
      925,  926,  927,  915,  930,  933,  933,  934,  935,  937,
      927,  938,  938,  938,  916,  939,  918,  919,  940,  920,
      922,  941,  923,  924,  942,  925,  926,  927,  943,  930,
      944,  934,  935,  937,  944,  927,  945,  946,  951,  939,
      947,  949,  940,  950,  952,  954,  941,  953,  942,  955,

      956,  956,  943,  958,  959,  944,  960,  960,  944,  961,
      945,  962,  946,  951,  947,  949,  966,  950,  968,  952,
      954,  953,  969,  955,  963,  963,  964,  964,  958,  959,
      965,  965,  965,  961,  970,  962,  971, 1079,  972,  973,
      966,  975,  976,  968,  977, 1075,  978,  969,  979,  980,
      981,  982,  983,  983,  984,  985,  986, 1064,  987,  970,
      989,  971,  972,  973,  990,  975,  993,  976,  994,  977,
      978,  996,  979,  980,  981,  997,  982,  998,  984,  999,
      985,  986,  987,  991,  991,  989,  992,  992,  992,  990,
     1000,  993,  994, 1001, 1003,  996, 1004, 1005, 1057, 1006,

      997,  998, 1007,  999, 1009, 1010, 1010, 1011, 1012, 1055,
     1013, 1014, 1015, 1016, 1016, 1000, 1018, 1001, 1019, 1003,
     1004, 1020, 1005, 1006, 1021, 1032, 1022, 1007, 1024, 1009,
     1026, 1011, 1027, 1012, 1013, 1014, 1015, 1028, 1029, 1033,
     1018, 1035, 1019, 1036, 1038, 1020, 1034, 1034, 1034, 1021,
     1022, 1037, 1024, 1039, 1046, 1026, 1027, 1040, 1041, 1042,
     1042, 1028, 1029, 1033, 1043, 1044, 1035, 1047, 1036, 1038,
     1045, 1045, 1045, 1048, 1051, 1037, 1049, 1050, 1039, 1046,
     1053, 1040, 1041, 1052, 1052, 1054, 1056, 1061, 1043, 1044,
     1058, 1047, 1059, 1060, 1062, 1031, 1063, 1045, 1048, 1051,

     1049, 1050, 1066, 1067, 1070, 1053, 1068, 1069, 1071, 1073,
     1054, 1056, 1061, 1072, 1058, 1074, 1059, 1060, 1076, 1062,
     1063, 1077, 1078, 1080, 1080, 1023, 1083, 1066, 1067, 1070,
     1068, 1069, 1082, 1071, 1073, 1085, 1087, 1072, 1086, 1088,
     1074, 1089, 1090, 1076, 1092, 1093, 1077, 1078, 1081, 1081,
     1081, 1083, 1091, 1091, 1091, 1094, 1082, 1095, 1098, 1100,
     1085, 1087, 1086, 1088, 1102, 1089, 1103, 1090, 1092, 1093,
     1099, 1099, 1104, 1104, 1105, 1107, 1108, 1017, 1109, 1094,
     1110, 1095, 1098, 1113, 1100, 1111, 1111, 1114, 1116, 1102,
     1103, 1117, 1118, 1119, 1008, 1120, 1121, 1122, 1105, 1123,

     1107, 1108, 1109, 1124, 1110, 1125, 1126, 1113, 1127, 1127,
     1129, 1114, 1116, 1130, 1002, 1117, 1118, 1131, 1119, 1120,
     1121, 1122, 1132, 1123, 1133, 1136, 1145, 1124, 1146, 1125,
     1149, 1126, 1137, 1137, 1129, 1138, 1138, 1138, 1130, 1143,
     1143, 1131, 1144, 1148, 1144, 1144, 1132, 1151, 1133, 1136,
     1145, 1147, 1153, 1146, 1147, 1149, 1150, 1150, 1150, 1154,
      995, 1156, 1157, 1157, 1157, 1158, 1166, 1148, 1159, 1161,
     1162, 1151, 1163, 1164, 1165, 1147, 1168, 1153, 1147, 1169,
      988, 1170, 1171, 1171, 1154, 1156, 1172, 1173, 1174, 1175,
     1158, 1166, 1159, 1161, 1162, 1176, 1163, 1164, 1165, 1177,

     1179, 1168, 1178, 1178, 1169, 1170, 1180, 1180, 1181, 1188,
     1172, 1173, 1174, 1175, 1182, 1182, 1183, 1183, 1184, 1184,
     1176, 1186, 1186, 1177, 1189, 1179, 1185, 1185, 1185, 1187,
     1187, 1190, 1196, 1181, 1188, 1191, 1192, 1193, 1194, 1194,
     1195, 1195, 1195, 1198,  967, 1199, 1200, 1203, 1189, 1201,
     1201, 1202, 1202, 1202, 1204, 1205, 1190, 1196, 1207, 1191,
     1192, 1193, 1209,  957, 1211, 1212, 1213, 1214, 1198, 1199,
     1200, 1203, 1215, 1215, 1215, 1216, 1217, 1218, 1221, 1204,
     1205, 1219, 1207, 1220, 1222, 1222, 1222, 1209, 1211, 1212,
     1213, 1223, 1214, 1224, 1225, 1225, 1225, 1228, 1228, 1216,

     1231, 1217, 1218, 1221, 1232, 1219, 1233, 1220, 1226, 1226,
     1226, 1227, 1227, 1227, 1234, 1223, 1238, 1224, 1229, 1229,
     1229, 1236, 1236, 1239, 1231, 1240, 1241, 1241, 1242, 1232,
     1243, 1233, 1244, 1245, 1246, 1247, 1247, 1248, 1234, 1250,
     1251, 1238, 1252, 1249,  936, 1253, 1254, 1254, 1239, 1257,
     1240, 1258, 1242, 1249, 1249, 1243, 1244, 1245, 1246, 1259,
     1260, 1248, 1261, 1250, 1251, 1265, 1252, 1264, 1249, 1253,
     1255, 1255, 1255, 1257,  932, 1258,  931, 1249, 1249, 1262,
     1262, 1266, 1266, 1259, 1275, 1260, 1261, 1263, 1263, 1263,
     1265, 1264, 1267, 1267, 1267, 1268, 1268, 1269, 1269, 1269,

     1270, 1270, 1271, 1271, 1271, 1272, 1272, 1276, 1275, 1277,
     1278, 1278, 1279,  929, 1280, 1281, 1282,  928, 1283, 1284,
     1285,  921, 1286, 1287, 1287, 1287, 1289, 1290,  917, 1291,
     1293, 1294, 1276, 1295, 1277, 1296, 1296, 1279, 1280, 1281,
     1298, 1282, 1283, 1300, 1284, 1285, 1286, 1297, 1297, 1301,
     1289, 1302, 1290, 1291, 1310, 1293, 1294, 1311, 1295, 1303,
     1303, 1306, 1306, 1307, 1307, 1298, 1312, 1300, 1308, 1308,
     1309, 1309, 1314, 1301, 1317, 1319, 1302, 1320, 1310, 1321,
     1324, 1311, 1313, 1313, 1313, 1322, 1322, 1323, 1323, 1323,
     1325, 1312, 1326, 1327,  901, 1328, 1314, 1329, 1317, 1330,

     1319, 1320, 1331, 1321, 1333, 1324, 1332, 1332, 1332, 1334,
     1335,  889, 1336, 1338, 1338, 1325, 1326, 1341, 1327, 1328,
     1339, 1339, 1329, 1342, 1330, 1340, 1340, 1331, 1343, 1333,
     1344, 1344, 1346, 1347, 1334, 1335, 1336, 1345, 1345, 1345,
     1348, 1349, 1341, 1350, 1351, 1351, 1352, 1353, 1342, 1354,
      888, 1355, 1343, 1356, 1357, 1358,  885, 1346, 1347, 1359,
     1360, 1360,  884, 1362, 1348, 1363, 1349, 1364, 1350, 1366,
     1352, 1353, 1372, 1372, 1354, 1355, 1369, 1370, 1356, 1357,
     1358, 1371, 1373, 1359, 1361, 1361, 1361, 1362, 1375, 1363,
     1377, 1364, 1378, 1366, 1367, 1367, 1367, 1368, 1368, 1368,

     1369, 1370, 1379,  844, 1380, 1371, 1373, 1383, 1384, 1385,
     1386, 1386, 1387, 1375, 1377, 1388, 1391, 1378, 1390, 1390,
     1392, 1392, 1393, 1393, 1393, 1394, 1394, 1379, 1380, 1395,
     1395, 1395, 1383, 1384, 1385, 1396, 1397, 1387, 1398, 1400,
     1388, 1391, 1401, 1403, 1404, 1405,  843, 1406, 1407,  832,
     1408, 1409, 1410, 1411, 1412, 1413, 1413, 1414, 1414, 1415,
     1396, 1397, 1420, 1398, 1400, 1421, 1401, 1403, 1404, 1422,
     1405, 1406, 1424, 1407, 1408, 1409, 1410, 1411, 1412, 1416,
     1416, 1417, 1417, 1415, 1425, 1426, 1420, 1427, 1428, 1421,
     1429, 1430, 1431, 1422, 1433, 1433, 1434, 1424, 1435, 1435,

     1436, 1436, 1438, 1439,  830, 1440, 1441, 1442, 1425, 1443,
     1426, 1427, 1428, 1446, 1429, 1447, 1430, 1431, 1448, 1448,
     1434, 1450, 1450, 1451, 1451, 1452, 1453, 1438, 1439, 1440,
     1441, 1442, 1454, 1443, 1455,  817, 1457, 1446, 1460, 1447,
     1458, 1458, 1459, 1459, 1461, 1462, 1462, 1463, 1469, 1452,
     1453, 1465, 1468, 1470, 1470, 1472, 1454, 1471, 1471, 1455,
     1457, 1473, 1474, 1460, 1475, 1477, 1477, 1478, 1478, 1461,
     1479, 1480, 1463, 1469, 1481, 1465, 1468, 1482, 1483, 1472,
     1484, 1485, 1486, 1486, 1488, 1473, 1474, 1489, 1492, 1475,
     1487, 1487, 1487, 1493,  812, 1479, 1480, 1494, 1481, 1495,

     1495, 1482, 1497, 1483, 1484, 1498, 1485, 1499, 1499, 1488,
     1501, 1489, 1492, 1496, 1496, 1496, 1500, 1500, 1493, 1502,
     1503, 1494, 1504, 1504, 1505, 1506, 1497, 1509,  808, 1498,
     1507, 1507, 1507, 1510, 1501, 1508, 1508, 1508, 1511, 1512,
     1513, 1514, 1514, 1502, 1503, 1515, 1515, 1515, 1505, 1518,
     1506, 1520, 1509, 1516, 1516, 1523, 1523, 1510, 1517, 1517,
     1517, 1525, 1511, 1512, 1513, 1524, 1524, 1526,  803, 1527,
     1528, 1529,  801, 1530, 1518, 1520, 1531, 1532,  800, 1533,
     1534, 1535,  792, 1536, 1537, 1538, 1525, 1539, 1540, 1542,
      791, 1544, 1526, 1527, 1528, 1546, 1529, 1530, 1545, 1547,

     1531, 1548, 1532, 1533, 1549, 1534, 1535, 1536, 1537, 1538,
     1550, 1539, 1553, 1540, 1542, 1544, 1545, 1554, 1555, 1546,
     1556, 1557, 1558, 1545, 1547, 1548, 1560, 1561, 1569, 1549,
     1562, 1562, 1565, 1565, 1567, 1550, 1570, 1553, 1566, 1566,
     1545, 1554, 1571, 1555, 1556, 1557, 1558, 1568, 1568,  789,
     1560,  786, 1561, 1569, 1573, 1573, 1574, 1574, 1567,  776,
      774, 1570,  769,  744,  740,  736, 1571, 1576, 1576, 1576,
     1577, 1577, 1580, 1580,  729,  724,  719,  716,  691,  658,
      655,  654,  653,  638,  632,  623,  622,  621,  601,  593,
      588,  555,  554,  547,  539,  537,  536,  533,  521,  512,

      489,  484,  483,  476,  466,  444,  442,  420,  414,  411,
      391,  386,  385,  380,  367,  351,  348,  347,  330,  312,
      307,  295,  293,  287,  286,  267,  264,  252,  232,  227,
      207,  206,  162,  161,  159,  152,  150,  144,  139,  120,
      117,  108,   95,   92,   89,   80,   75,   66,   46,   26,
        7,    3, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex_conf.l"
#line 2 "lex_conf.l"
#include <math.h>
#include <ctype.h>
#include <stdlib.h>

#include "configManagement.h"
#include "attributesInfo.h"
#include "random.h"
#include "messageBuffer.h"

char *charFilter(char *string);
extern configManagement cm;
extern attributesInfo ai;
extern Random rnd;
extern messageBuffer mb;


#line 1697 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 23 "lex_conf.l"


#line 1882 "lex.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1576 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3153 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 25 "lex_conf.l"
{
/*	int atributs=atoi(charFilter(yytext));
	ai.setNumAttributes(atributs);
	mb.printf("Number of attributes in domain:%d\n"
		,atoi(charFilter(yytext)));*/
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 32 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_CROSSOVER);
	mb.printf("Crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 37 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),POP_SIZE);
	mb.printf("Popsize: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),ITERATIONS);
	mb.printf("GA Iterations:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MIN_CLASSIFIERS);
	mb.printf("Minumum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 53 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext))
		,INITIALIZATION_MAX_CLASSIFIERS);
	mb.printf("Maximum number of classifiers per individual in initialization:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lex_conf.l"
{
	cm.setParameter(1,IGNORE_MISSING_VALUES);
	mb.printf("Ignore missing values\n");
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "lex_conf.l"
{
	cm.setParameter(1,DUMP_EVOLUTION_STATS);
	mb.printf("Dump learning process statistics at each iteration\n");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "lex_conf.l"
{
	if(!strcasecmp(yytext+20,"TOURNAMENT")) {
		cm.setParameter(TOURNAMENT_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection Algorithm\n");
	} else if(!strcasecmp(yytext+20,"TOURNAMENTWOR")) {
		cm.setParameter(TOURNAMENT_WOR_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Tournament Selection without replacement Algorithm\n");
	} else if(!strcasecmp(yytext+20,"PARETO")) {
		cm.setParameter(PARETO_SELECTION,SELECTION_ALGORITHM);	
		mb.printf("Pareto Selection Algorithm\n");
	} else {
		mb.printf("Unknown selection algorithm:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),TOURNAMENT_SIZE);
	mb.printf("Tournament size:%f\n",atof(charFilter(yytext)));
}										
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 91 "lex_conf.l"
{
	cm.setParameter(1,SHOW_FRONTS);
	mb.printf("Show Pareto Fronts\n");
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "lex_conf.l"
{
	if(!strcasecmp(&yytext[19],"1PX")) {
		cm.setParameter(CROSS_1P,CROSSOVER_OPERATOR);
		mb.printf("One Point Crossover\n");
	} else if(!strcasecmp(&yytext[19],"2PX")) {
		cm.setParameter(CROSS_2P,CROSSOVER_OPERATOR);
		mb.printf("Two Points Crossover\n");
	} else if(!strcasecmp(&yytext[19],"INFORMED")) {
		cm.setParameter(CROSS_INFORMED,CROSSOVER_OPERATOR);
		mb.printf("Informed Crossover\n");
	} else {
		mb.printf("Unknown crossover operator:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "lex_conf.l"
{
	if(!strcasecmp(yytext+17,"ACCURACY")) {
		cm.setParameter(MAXIMIZE,MAX_MIN);
		cm.setParameter(ACCURACY,FITNESS_FUNCTION);
		mb.printf("Squared accuracy fitness function\n");
	} else if(!strcasecmp(yytext+17,"MDL")) {
		cm.setParameter(MINIMIZE,MAX_MIN);
		cm.setParameter(MDL,FITNESS_FUNCTION);
		mb.printf("MDL fitness function\n");
	} else {
		mb.printf("Unknown fitness function:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT);
	mb.printf("MDL fixed weight %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 133 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,MDL_WEIGHT_RELAX_FACTOR);
	mb.printf("MDL Weight relax factor %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MDL_INITIAL_TL_RATIO);
	mb.printf("Initial theory length proportion in MDL formula: %f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MDL_ITERATION);
	mb.printf("Iteracio activacio MDL %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_ITERATION);
	mb.printf("Pruning operator activated at iteration:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 153 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PRUNING_MIN_CLASSIFIERS);
	mb.printf("Pruning stops if #classifiers is less that %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD);
	mb.printf("The number of min classifiers is automatically set\n");
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 162 "lex_conf.l"
{
	cm.setParameter(1,PRUNING_AUTO_THRESHOLD2);
	mb.printf("The number of min classifiers is automatically set2\n");
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 167 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PRUNING_AUTO_OFFSET);
	mb.printf("The min classifiers offset %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_INDIVIDUAL_MUTATION);
	mb.printf("Individual-wise mutation probability:%f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 177 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,HIERARCHICAL_SELECTION_ITERATION);
	mb.printf("Hierarchical selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 183 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),HIERARCHICAL_SELECTION_THRESHOLD);
	mb.printf("Hierarchical selection threshold :%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 189 "lex_conf.l"
{
	cm.setParameter(1,HIERARCHICAL_SELECTION_USES_MDL);
	mb.printf("Hierarchical selection uses MDL Theory Length\n");
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "lex_conf.l"
{
	cm.setParameter(1,CHECK_WINDOWING);
	mb.printf("Performance tests of windowing enabled");
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 199 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_ILAS);
	mb.printf("ILAS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 204 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),WINDOWING_GWS);
	mb.printf("GWS Windowing of degree %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 210 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_ONE);
	mb.printf("Probability of value ONE for GABIL and ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SHARP);
	mb.printf("Probability of value Sharp for LCS/Instances KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 222 "lex_conf.l"
{
	cm.setParameter(1,KR_ADI);
	mb.printf("Using Adaptive Discretization Intervals Knowledge Representation\n");
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 227 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_MERGE);
	mb.printf("Probability of merge operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 233 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_SPLIT);
	mb.printf("Probability of split operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 239 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE);
	mb.printf("Probability of reinitialize operator in ADI KR: %f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 245 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PROB_REINITIALIZE_AT_END);
	mb.printf("Probability of reinitialize operator at final iteration in ADI KR:%f\n"
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),MAX_INTERVALS);
	mb.printf("Maximum number of intervals per attribute in ADI KR:%d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 257 "lex_conf.l"
{
	cm.setParameter(1,KR_HYPERRECT);
	mb.printf("Using HYPERRECT Knowledge Representation\n");
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 262 "lex_conf.l"
{
	cm.setParameter(1,KR_LCS);
	mb.printf("Using LCS Knowledge Representation\n");
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 267 "lex_conf.l"
{
	cm.setParameter(1,KR_INSTANCE_SET);
	mb.printf("Using Instance Set/1-NN Knowledge Representation\n");
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 272 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,ALPHA_OF_BLX);
	mb.printf("Using BLX crossover with alpha:%f\n" 
		,atof(charFilter(yytext)));
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 278 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,D_OF_FR);
	mb.printf("Using FR crossover with D:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 283 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,N_OF_SBX);
	mb.printf("Using SBX crossover with N:%f\n" ,atof(charFilter(yytext)));
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "lex_conf.l"
{
	rnd.setSeed((unsigned long int)atof(charFilter(yytext)));
	mb.printf("Random seed specified:%s\n",yytext+12);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 293 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE);
	mb.printf("Penalize the individuals that have a size less than %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 299 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)),PENALIZE_MIN_SIZE_AT_END);
	mb.printf("Penalize the individuals that have a size less than %d at end\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 305 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)) ,PARETO_SELECTION_ITERATION);
	mb.printf("Pareto selection activated, starting at iteration %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 312 "lex_conf.l"
{
	cm.setParameter(atoi(charFilter(yytext)) ,TOTAL_TIME);
	mb.printf("Time spent on the learning process %d\n"
		,atoi(charFilter(yytext)));
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 318 "lex_conf.l"
{
	if(!strcasecmp(yytext+14,"MAJOR")) {
		cm.setParameter(MAJOR,DEFAULT_CLASS);
		mb.printf("Majoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"MINOR")) {
		cm.setParameter(MINOR,DEFAULT_CLASS);
		mb.printf("Minoritarian class will be default\n");
	} else if(!strcasecmp(yytext+14,"DISABLED")) {
		cm.setParameter(DISABLED,DEFAULT_CLASS);
		mb.printf("Default class disabled\n");
	} else {
		cm.setParameter(atoi(charFilter(yytext)) ,DEFAULT_CLASS);
		mb.printf("Default class set to class :%d\n",atoi(charFilter(yytext)));
	}
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 334 "lex_conf.l"
{
	cm.setParameter(1 ,SMART_INIT);
	mb.printf("Initialization uses examples to create the initial rules\n");
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 339 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_INIT);
	mb.printf("Instances used in initialization are sampled with uniform class distribution\n");
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 344 "lex_conf.l"
{
	cm.setParameter(1 ,CLASS_WISE_ACC);
	mb.printf("Training accuracy computation will be class-wise\n");
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 350 "lex_conf.l"
{
	cm.setParameter(1 ,DUMP_ACTIVATION);
	mb.printf("Dump average activation after initialization\n");
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 356 "lex_conf.l"
{
	 if(!strcasecmp(yytext+15,"FTB")) {
		cm.setParameter(FTB,PRUNING_POLICY);
		mb.printf("Rule pruning policy is front to back\n");
	} else if(!strcasecmp(yytext+15,"BTF")) {
		cm.setParameter(BTF,PRUNING_POLICY);
		mb.printf("Rule pruning policy is back to front\n");
	} else if(!strcasecmp(yytext+15,"RANDOM")) {
		cm.setParameter(RANDOM,PRUNING_POLICY);
		mb.printf("Rule pruning policy is random\n");
	} else {
		mb.printf("Unknown pruning policy:%s\n",yytext);
		exit(1);
	}
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 373 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SMART_CROSSOVER);
	mb.printf("Smart crossover probability: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 378 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),NUM_PARENTS_SMART_CROSSOVER);
	mb.printf("Number of parents in smart crossover: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 384 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),FILTER_SMART_CROSSOVER);
	mb.printf("Smart crossover filter threshold: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 390 "lex_conf.l"
{
	cm.setParameter(1,ADD_RULES_SMART_CROSSOVER);
	mb.printf("Smart crossover adds new rules\n");
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 395 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_ORDERING);
	mb.printf("Number of repetitions of the rule ordering process in SmartX: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 400 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_WITH_SMART_CROSSOVER);
	mb.printf("Elitism stage will use smart crossover\n");
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 404 "lex_conf.l"
{
	cm.setParameter(1,ELITISM_LAST_ITERATION_WITH_SMART_CROSSOVER);
	mb.printf("Last iteration of elitism stage will use smart crossover\n");
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 410 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_CLEANING_PROB);
	mb.printf("Rule cleaning probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 415 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),RULE_GENERALIZING_PROB);
	mb.printf("Rule generalizing probability : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 421 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),DUMP_GENOTYPE_ITERATIONS);
	mb.printf("Genotype of best individual is dumped every %d iterations\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 426 "lex_conf.l"
{
	mb.enable();
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 430 "lex_conf.l"
{
	mb.printf("Crossover will use informed cut points (cutPoints.dat)\n");
	cm.setParameter(1,INFORMED_CROSSOVER);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 435 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_INIT);
	mb.printf("Coverage ratio in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 440 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),EXPRESSED_ATT_INIT);
	mb.printf("Number of expressed attributes in initialization : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 445 "lex_conf.l"
{
	mb.printf("Initialidation will always generate individuals with a fixed number of expressed attributes\n");
	cm.setParameter(1,FIX_EXPRESSED_ATTS_INIT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 452 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_BREAKPOINT);
	mb.printf("Coverage breakpoint for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 457 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),COVERAGE_RATIO);
	mb.printf("Coverage ratio for MDL fitness : %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 463 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),REPETITIONS_RULE_LEARNING);
	mb.printf("Number of times we will try to learn a rule from the current training set: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 469 "lex_conf.l"
{
	mb.printf("Hyperrectangle attribute list knowledge representation\n");
	cm.setParameter(1,HYPERRECT_LIST);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 474 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_GENERALIZE_LIST);
	mb.printf("Probability of generalizing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 479 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),PROB_SPECIALIZE_LIST);
	mb.printf("Probability of specializing the hyperrect list KR: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 484 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MIN_INTERVAL_SIZE_INIT);
	mb.printf("Lower bound of attribute interval: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 489 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MAX_INTERVAL_SIZE_INIT);
	mb.printf("Upper bound of attribute interval: %f\n",atof(charFilter(yytext)));
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 494 "lex_conf.l"
{
	/*mb.printf("Intervalar representation will use rotations\n");
	cm.setParameter(1,ROTATE_HYPERRECTANGLES);*/
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 499 "lex_conf.l"
{
	/*mb.printf("Only a subset of attributes will be rotated (rotatedAttributes.dat)\n");
	cm.setParameter(1,RESTRICTED_ROTATED_ATTRIBUTES);*/
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 505 "lex_conf.l"
{
	/*cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_INIT);
	mb.printf("Probability of setting an angle to 0 degrees in initialization: %f\n",atof(charFilter(yytext)));*/
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 510 "lex_conf.l"
{
	/*cm.setParameter(atof(charFilter(yytext)),PROB_0ANGLE_MUT);
	mb.printf("Probability of setting an angle to 0 degrees in mutation: %f\n",atof(charFilter(yytext)));*/
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 515 "lex_conf.l"
{
	mb.printf("Dump statistics of the attributes in the ALKR representation\n");
	cm.setParameter(1,DUMP_ATTRIBUTE_STATISTICS);
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 520 "lex_conf.l"
{
	cm.setParameter(atof(charFilter(yytext)),MAX_RULES);
	mb.printf("Maximum number of rules learnt with BioHEL: %d\n",atoi(charFilter(yytext)));
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 526 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with greater than predicates\n");
	cm.setParameter(1,USE_GREATER_THAN_PREDICATES);
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 531 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with less than predicates\n");
	cm.setParameter(1,USE_LESS_THAN_PREDICATES);
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 536 "lex_conf.l"
{
	mb.printf("Use hyperrect list real KR with ratio predicates\n");
	cm.setParameter(1,USE_RATIO_PREDICATES);
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 541 "lex_conf.l"
{
	mb.printf("The creation of the strata in the ILAS windowing will use the DOB method\n");
	cm.setParameter(1,DOB_PARTITIONS_IN_WINDOWING);
}
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 549 "lex_conf.l"
/* eat up one-line comments */
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 551 "lex_conf.l"
/* eat up whitespace */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 553 "lex_conf.l"
mb.printf( "Unrecognized character: %s\n", yytext );
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 555 "lex_conf.l"
ECHO;
	YY_BREAK
#line 2760 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1576 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1576 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1575);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 555 "lex_conf.l"


int yywrap ()
{
	return 1;
}

char *charFilter(char *string)
{
	while(*string && !(isdigit(*string) || *string=='-')) string++;
	return string;
}

void parseConfig(char *configFile)
{
	yyin = fopen( configFile, "r" );
	yylex();
}								 

